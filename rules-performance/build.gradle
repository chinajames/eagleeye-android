apply plugin: 'com.android.library'

def performance_versionCode = 1
def performance_versionName = '1.0.0'

android {
    compileSdkVersion rootProject.extensions.getByName('compileSdkVersion')
    buildToolsVersion rootProject.extensions.getByName('buildToolsVersion')

    defaultConfig {
        minSdkVersion rootProject.extensions.getByName('minSdkVersion')
        targetSdkVersion rootProject.extensions.getByName('targetSdkVersion')
        versionCode performance_versionCode
        versionName performance_versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile project(':lint-base')

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile ('com.android.tools.lint:lint-checks:25.0.0') {
        exclude group: 'com.android.tools.lint', module: 'lint-api'
    }

    testCompile 'junit:junit:4.12'
    testCompile 'com.android.tools.lint:lint:25.0.0'
    testCompile 'com.android.tools.lint:lint-tests:24.5.0'
    testCompile 'com.android.tools:testutils:25.0.0'
}

task buildJar(dependsOn: ['compileReleaseSources'], type: Jar) {
    baseName = rootProject.extensions.getByName('appName') + '-performance';
    version = performance_versionName;
    extension = 'jar';

    // Source classes
    from(project(':lint-base').buildDir.absolutePath + '/intermediates/classes/release');
    from(project.buildDir.absolutePath + '/intermediates/classes/release');

    // Remove useless files
    exclude '**/BuildConfig.class';
    exclude '**/R.class';
    exclude '**/R\$*.class';

    // Add manifest attribute for lint recognition
    Manifest mf = getManifest();
    if (null != mf) {
        Attributes attrs = mf.getAttributes();
        attrs.put('Lint-Registry', 'com.eagleeye.rules.performance.LintIssueRegistry');
    }

    // Specify output directory
    File outputDir = new File(project.buildDir.absolutePath + '/outputs/jar');
    if (!outputDir.exists()) {
        outputDir.mkdirs();
    }
    setDestinationDir(outputDir);
}
