<?xml version="1.0" encoding="utf-8"?>
<hide-methods version="19">
    <class name="android.transition.Transition">
        <method signature="protected void createAnimators(android.view.ViewGroup, android.transition.TransitionValuesMaps, android.transition.TransitionValuesMaps) "/>
        <method signature="protected void runAnimators() "/>
        <method signature="public void pause() "/>
        <method signature="public void resume() "/>
        <method signature="protected void animate(android.animation.Animator) "/>
        <method signature="protected void start() "/>
        <method signature="protected void end() "/>
        <method signature="protected void cancel() "/>
    </class>
    <class name="android.hardware.display.DisplayManager">
        <method signature="public void startWifiDisplayScan() "/>
        <method signature="public void stopWifiDisplayScan() "/>
        <method signature="public void connectWifiDisplay(java.lang.String) "/>
        <method signature="public void pauseWifiDisplay() "/>
        <method signature="public void resumeWifiDisplay() "/>
        <method signature="public void disconnectWifiDisplay() "/>
        <method signature="public void renameWifiDisplay(java.lang.String, java.lang.String) "/>
        <method signature="public void forgetWifiDisplay(java.lang.String) "/>
        <method signature="public android.hardware.display.WifiDisplayStatus getWifiDisplayStatus() "/>
    </class>
    <class name="android.os.MemoryFile">
        <method signature="public java.io.FileDescriptor getFileDescriptor() throws java.io.IOException"/>
        <method signature="public static int getSize(java.io.FileDescriptor) throws java.io.IOException"/>
    </class>
    <class name="android.support.v7.view.ActionMode">
        <method signature="public boolean isUiFocusable() "/>
    </class>
    <class name="android.test.mock.MockPackageManager">
        <method signature="public int getPackageUid(java.lang.String, int) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public List&lt;android.content.pm.PackageInfo&gt; getInstalledPackages(int, int) "/>
        <method signature="public void grantPermission(java.lang.String, java.lang.String) "/>
        <method signature="public void revokePermission(java.lang.String, java.lang.String) "/>
        <method signature="public int getUidForSharedUser(java.lang.String) "/>
        <method signature="public android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent, int, int) "/>
        <method signature="public List&lt;android.content.pm.ResolveInfo&gt; queryIntentActivitiesAsUser(android.content.Intent, int, int) "/>
        <method signature="public List&lt;android.content.pm.ResolveInfo&gt; queryBroadcastReceivers(android.content.Intent, int, int) "/>
        <method signature="public List&lt;android.content.pm.ResolveInfo&gt; queryIntentServicesAsUser(android.content.Intent, int, int) "/>
        <method signature="public List&lt;android.content.pm.ResolveInfo&gt; queryIntentContentProvidersAsUser(android.content.Intent, int, int) "/>
        <method signature="public android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String, int) "/>
        <method signature="public void installPackage(android.net.Uri, IPackageInstallObserver, int, java.lang.String) "/>
        <method signature="public void movePackage(java.lang.String, IPackageMoveObserver, int) "/>
        <method signature="public void clearApplicationUserData(java.lang.String, IPackageDataObserver) "/>
        <method signature="public void deleteApplicationCacheFiles(java.lang.String, IPackageDataObserver) "/>
        <method signature="public void freeStorageAndNotify(long, IPackageDataObserver) "/>
        <method signature="public void freeStorage(long, android.content.IntentSender) "/>
        <method signature="public void deletePackage(java.lang.String, IPackageDeleteObserver, int) "/>
        <method signature="public void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName) "/>
        <method signature="public void getPackageSizeInfo(java.lang.String, int, IPackageStatsObserver) "/>
        <method signature="public android.content.ComponentName getHomeActivities(List&lt;android.content.pm.ResolveInfo&gt;) "/>
        <method signature="public void installPackageWithVerification(android.net.Uri, IPackageInstallObserver, int, java.lang.String, android.net.Uri, android.content.pm.ManifestDigest, android.content.pm.ContainerEncryptionParams) "/>
        <method signature="public void installPackageWithVerificationAndEncryption(android.net.Uri, IPackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, android.content.pm.ContainerEncryptionParams) "/>
        <method signature="public boolean setApplicationBlockedSettingAsUser(java.lang.String, boolean, android.os.UserHandle) "/>
        <method signature="public boolean getApplicationBlockedSettingAsUser(java.lang.String, android.os.UserHandle) "/>
        <method signature="public int installExistingPackage(java.lang.String) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() "/>
    </class>
    <class name="android.print.PrintJobId">
        <method signature="public java.lang.String flattenToString() "/>
        <method signature="public static android.print.PrintJobId unflattenFromString(java.lang.String) "/>
    </class>
    <class name="android.net.http.SslCertificate">
        <method signature="public android.view.View inflateCertificateView(android.content.Context) "/>
    </class>
    <class name="android.media.SubtitleController">
        <method signature="public void selectDefaultTrack() "/>
        <method signature="public void reset() "/>
        <method signature="public void setAnchor(android.media.SubtitleController.Anchor) "/>
    </class>
    <class name="android.net.wifi.WifiEnterpriseConfig">
        <method signature="public void setCaCertificateAlias(java.lang.String) "/>
        <method signature="public java.lang.String getCaCertificateAlias() "/>
        <method signature="public void setClientCertificateAlias(java.lang.String) "/>
        <method signature="public java.lang.String getClientCertificateAlias() "/>
    </class>
    <class name="android.text.format.DateUtils">
        <method signature="public static java.lang.CharSequence formatDuration(long) "/>
    </class>
    <class name="android.app.ActivityThread">
        <method signature="public static android.content.Intent getIntentBeingBroadcast() "/>
    </class>
    <class name="android.net.DhcpStateMachine">
        <method signature="public void doQuit() "/>
    </class>
    <class name="android.net.sip.SipSession.Listener">
        <method signature="public void onCallTransferring(android.net.sip.SipSession, java.lang.String) "/>
    </class>
    <class name="android.net.wifi.WifiManager">
        <method signature="public boolean startScan(android.os.WorkSource) "/>
        <method signature="public boolean requestBatchedScan(android.net.wifi.BatchedScanSettings) "/>
        <method signature="public boolean requestBatchedScan(android.net.wifi.BatchedScanSettings, android.os.WorkSource) "/>
        <method signature="public boolean isBatchedScanSupported() "/>
        <method signature="public void stopBatchedScan(android.net.wifi.BatchedScanSettings) "/>
        <method signature="public List&lt;android.net.wifi.BatchedScanResult&gt; getBatchedScanResults() "/>
        <method signature="public void pollBatchedScan() "/>
        <method signature="public void setCountryCode(java.lang.String, boolean) "/>
        <method signature="public void setFrequencyBand(int, boolean) "/>
        <method signature="public int getFrequencyBand() "/>
        <method signature="public boolean isDualBandSupported() "/>
        <method signature="public void getTxPacketCount(android.net.wifi.WifiManager.TxPacketCountListener) "/>
        <method signature="public boolean setWifiApEnabled(android.net.wifi.WifiConfiguration, boolean) "/>
        <method signature="public int getWifiApState() "/>
        <method signature="public boolean isWifiApEnabled() "/>
        <method signature="public android.net.wifi.WifiConfiguration getWifiApConfiguration() "/>
        <method signature="public boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration) "/>
        <method signature="public boolean startWifi() "/>
        <method signature="public boolean stopWifi() "/>
        <method signature="public boolean addToBlacklist(java.lang.String) "/>
        <method signature="public boolean clearBlacklist() "/>
        <method signature="public void connect(android.net.wifi.WifiConfiguration, android.net.wifi.WifiManager.ActionListener) "/>
        <method signature="public void connect(int, android.net.wifi.WifiManager.ActionListener) "/>
        <method signature="public void save(android.net.wifi.WifiConfiguration, android.net.wifi.WifiManager.ActionListener) "/>
        <method signature="public void forget(int, android.net.wifi.WifiManager.ActionListener) "/>
        <method signature="public void disable(int, android.net.wifi.WifiManager.ActionListener) "/>
        <method signature="public void startWps(android.net.wifi.WpsInfo, android.net.wifi.WifiManager.WpsListener) "/>
        <method signature="public void cancelWps(android.net.wifi.WifiManager.ActionListener) "/>
        <method signature="public android.os.Messenger getWifiServiceMessenger() "/>
        <method signature="public android.os.Messenger getWifiStateMachineMessenger() "/>
        <method signature="public java.lang.String getConfigFile() "/>
        <method signature="public boolean isMulticastEnabled() "/>
        <method signature="public boolean initializeMulticastFiltering() "/>
        <method signature="public void captivePortalCheckComplete() "/>
    </class>
    <class name="android.hardware.SensorManager">
        <method signature="protected abstract List&lt;android.hardware.Sensor&gt; getFullSensorList() "/>
        <method signature="protected abstract void unregisterListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor) "/>
        <method signature="protected abstract boolean registerListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler, int, int) "/>
        <method signature="protected abstract boolean flushImpl(android.hardware.SensorEventListener) "/>
        <method signature="protected abstract boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor) "/>
        <method signature="protected abstract boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor, boolean) "/>
    </class>
    <class name="android.os.Environment">
        <method signature="public static void initForCurrentUser() "/>
        <method signature="public static java.io.File getSystemSecureDirectory() "/>
        <method signature="public static java.io.File getSecureDataDirectory() "/>
        <method signature="public static java.io.File getMediaStorageDirectory() "/>
        <method signature="public static java.io.File getUserSystemDirectory(int) "/>
        <method signature="public static boolean isEncryptedFilesystemEnabled() "/>
        <method signature="public static java.io.File getLegacyExternalStorageDirectory() "/>
        <method signature="public static java.io.File getLegacyExternalStorageObbDirectory() "/>
        <method signature="public static java.io.File getEmulatedStorageSource(int) "/>
        <method signature="public static java.io.File getEmulatedStorageObbSource() "/>
        <method signature="public static java.io.File[] buildExternalStorageAndroidDataDirs() "/>
        <method signature="public static java.io.File[] buildExternalStorageAppDataDirs(java.lang.String) "/>
        <method signature="public static java.io.File[] buildExternalStorageAppMediaDirs(java.lang.String) "/>
        <method signature="public static java.io.File[] buildExternalStorageAppObbDirs(java.lang.String) "/>
        <method signature="public static java.io.File[] buildExternalStorageAppFilesDirs(java.lang.String) "/>
        <method signature="public static java.io.File[] buildExternalStorageAppCacheDirs(java.lang.String) "/>
        <method signature="public static void setUserRequired(boolean) "/>
        <method signature="public static transient java.io.File[] buildPaths(java.io.File[], java.lang.String[]) "/>
        <method signature="public static transient java.io.File buildPath(java.io.File, java.lang.String[]) "/>
        <method signature="public static java.io.File maybeTranslateEmulatedPathToInternal(java.io.File) "/>
    </class>
    <class name="android.os.RecoverySystem">
        <method signature="public static java.lang.String handleAftermath() "/>
    </class>
    <class name="android.app.DownloadManager">
        <method signature="public void setAccessAllDownloads(boolean) "/>
        <method signature="public transient int markRowDeleted(long[]) "/>
        <method signature="public transient void restartDownload(long[]) "/>
        <method signature="public static boolean isActiveNetworkExpensive(android.content.Context) "/>
        <method signature="public static long getActiveNetworkWarningBytes(android.content.Context) "/>
        <method signature="public long addCompletedDownload(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, long, boolean, boolean) "/>
        <method signature="public android.net.Uri getDownloadUri(long) "/>
    </class>
    <class name="android.app.Notification.BigTextStyle">
        <method signature="public void addExtras(android.os.Bundle) "/>
        <method signature="public android.app.Notification buildStyled(android.app.Notification) "/>
    </class>
    <class name="android.database.sqlite.SQLiteDatabase">
        <method signature="public void reopenReadWrite() "/>
        <method signature="public void addCustomFunction(java.lang.String, int, android.database.sqlite.SQLiteDatabase.CustomFunction) "/>
        <method signature="public boolean isInMemoryDatabase() "/>
    </class>
    <class name="java.util.concurrent.locks.AbstractQueuedLongSynchronizer">
        <method signature="public final boolean hasQueuedPredecessors() "/>
    </class>
    <class name="java.net.DatagramPacket">
        <method signature="public void resetLengthForReceive() "/>
        <method signature="public void setReceivedLength(int) "/>
    </class>
    <class name="com.android.internal.view.menu.IconMenuView">
        <method signature="public int[] getLayout() "/>
        <method signature="public int getLayoutNumRows() "/>
    </class>
    <class name="android.media.RemoteControlClient.MetadataEditor">
        <method signature="public java.lang.Object clone() throws java.lang.CloneNotSupportedException"/>
    </class>
    <class name="android.telephony.CellSignalStrengthLte">
        <method signature="public void initialize(int, int, int, int, int, int) "/>
        <method signature="public void initialize(android.telephony.SignalStrength, int) "/>
        <method signature="protected void copyFrom(android.telephony.CellSignalStrengthLte) "/>
        <method signature="public android.telephony.CellSignalStrengthLte copy() "/>
        <method signature="public void setDefaultValues() "/>
    </class>
    <class name="android.net.sip.SipAudioCall">
        <method signature="public android.net.sip.SipSession getSipSession() "/>
        <method signature="public android.net.rtp.AudioStream getAudioStream() "/>
        <method signature="public android.net.rtp.AudioGroup getAudioGroup() "/>
        <method signature="public void setAudioGroup(android.net.rtp.AudioGroup) "/>
    </class>
    <class name="android.graphics.drawable.InsetDrawable">
        <method signature="public void setLayoutDirection(int) "/>
    </class>
    <class name="android.util.ArrayMap">
        <method signature="public void erase() "/>
        <method signature="public void append(K, V) "/>
    </class>
    <class name="android.os.storage.StorageManager">
        <method signature="public static android.os.storage.StorageManager from(android.content.Context) "/>
        <method signature="public void registerListener(android.os.storage.StorageEventListener) "/>
        <method signature="public void unregisterListener(android.os.storage.StorageEventListener) "/>
        <method signature="public void enableUsbMassStorage() "/>
        <method signature="public void disableUsbMassStorage() "/>
        <method signature="public boolean isUsbMassStorageConnected() "/>
        <method signature="public boolean isUsbMassStorageEnabled() "/>
        <method signature="public java.lang.String getVolumeState(java.lang.String) "/>
        <method signature="public android.os.storage.StorageVolume[] getVolumeList() "/>
        <method signature="public java.lang.String[] getVolumePaths() "/>
        <method signature="public android.os.storage.StorageVolume getPrimaryVolume() "/>
        <method signature="public static android.os.storage.StorageVolume getPrimaryVolume(android.os.storage.StorageVolume[]) "/>
        <method signature="public long getStorageLowBytes(java.io.File) "/>
        <method signature="public long getStorageFullBytes(java.io.File) "/>
    </class>
    <class name="java.net.ServerSocket">
        <method signature="public java.net.SocketImpl getImpl$() "/>
    </class>
    <class name="android.view.InputQueue">
        <method signature="public void dispose() "/>
        <method signature="public void dispose(boolean) "/>
        <method signature="public int getNativePtr() "/>
        <method signature="public void sendInputEvent(android.view.InputEvent, java.lang.Object, boolean, android.view.InputQueue.FinishedInputEventCallback) "/>
    </class>
    <class name="android.widget.PopupWindow">
        <method signature="public void setClipToScreenEnabled(boolean) "/>
        <method signature="public boolean isLayoutInScreenEnabled() "/>
        <method signature="public void setLayoutInScreenEnabled(boolean) "/>
        <method signature="public void setLayoutInsetDecor(boolean) "/>
        <method signature="public void setWindowLayoutType(int) "/>
        <method signature="public int getWindowLayoutType() "/>
        <method signature="public void setTouchModal(boolean) "/>
        <method signature="public void showAtLocation(android.os.IBinder, int, int, int) "/>
        <method signature="public int getMaxAvailableHeight(android.view.View, int, boolean) "/>
    </class>
    <class name="android.text.Selection">
        <method signature="public static boolean moveToPreceding(android.text.Spannable, android.text.Selection.PositionIterator, boolean) "/>
        <method signature="public static boolean moveToFollowing(android.text.Spannable, android.text.Selection.PositionIterator, boolean) "/>
    </class>
    <class name="android.view.InputDevice">
        <method signature="public int getGeneration() "/>
        <method signature="public boolean isExternal() "/>
        <method signature="public boolean isFullKeyboard() "/>
        <method signature="public boolean hasButtonUnderPad() "/>
    </class>
    <class name="android.support.v4.app.DialogFragment">
        <method signature="public android.view.LayoutInflater getLayoutInflater(android.os.Bundle) "/>
    </class>
    <class name="android.preference.DialogPreference">
        <method signature="protected boolean needInputMethod() "/>
    </class>
    <class name="android.graphics.LinearGradient">
        <method signature="protected android.graphics.Shader copy() "/>
    </class>
    <class name="java.util.concurrent.locks.AbstractQueuedSynchronizer">
        <method signature="public final boolean hasQueuedPredecessors() "/>
    </class>
    <class name="com.android.internal.policy.impl.PhoneWindow">
        <method signature="public void alwaysReadCloseOnTouchAttr() "/>
    </class>
    <class name="android.content.ContentProvider">
        <method signature="public static android.content.ContentProvider coerceToLocalContentProvider(android.content.IContentProvider) "/>
        <method signature="protected void enforceReadPermissionInner(android.net.Uri) throws java.lang.SecurityException"/>
        <method signature="protected void enforceWritePermissionInner(android.net.Uri) throws java.lang.SecurityException"/>
        <method signature="public final void setAppOps(int, int) "/>
        <method signature="public android.app.AppOpsManager getAppOpsManager() "/>
        <method signature="public android.database.Cursor rejectQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.os.CancellationSignal) "/>
        <method signature="public android.net.Uri rejectInsert(android.net.Uri, android.content.ContentValues) "/>
        <method signature="public android.content.IContentProvider getIContentProvider() "/>
        <method signature="public void attachInfoForTesting(android.content.Context, android.content.pm.ProviderInfo) "/>
    </class>
    <class name="android.net.LinkProperties">
        <method signature="public int describeContents() "/>
    </class>
    <class name="android.widget.CompoundButton">
        <method signature="public int getHorizontalOffsetForDrawables() "/>
    </class>
    <class name="android.content.Intent">
        <method signature="public void setAllowFds(boolean) "/>
        <method signature="public java.lang.Object getExtra(java.lang.String) "/>
        <method signature="public android.os.IBinder getIBinderExtra(java.lang.String) "/>
        <method signature="public java.lang.Object getExtra(java.lang.String, java.lang.Object) "/>
        <method signature="public boolean isExcludingStopped() "/>
        <method signature="public android.content.ComponentName resolveSystemService(android.content.pm.PackageManager, int) "/>
        <method signature="public android.content.Intent putExtra(java.lang.String, android.os.IBinder) "/>
        <method signature="public java.lang.String toInsecureString() "/>
        <method signature="public java.lang.String toInsecureStringWithClip() "/>
        <method signature="public java.lang.String toShortString(boolean, boolean, boolean, boolean) "/>
        <method signature="public void toShortString(java.lang.StringBuilder, boolean, boolean, boolean, boolean) "/>
        <method signature="public void prepareToLeaveProcess() "/>
        <method signature="public boolean migrateExtraStreamToClipData() "/>
    </class>
    <class name="java.util.concurrent.ForkJoinPool">
        <method signature="public static java.util.concurrent.ForkJoinPool commonPool() "/>
        <method signature="public static int getCommonPoolParallelism() "/>
    </class>
    <class name="android.content.AsyncTaskLoader">
        <method signature="public void waitForLoader() "/>
    </class>
    <class name="android.provider.Telephony.Sms.Sent">
        <method signature="public static android.net.Uri addMessage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Long) "/>
    </class>
    <class name="android.animation.LayoutTransition">
        <method signature="public void startChangingAnimations() "/>
        <method signature="public void endChangingAnimations() "/>
        <method signature="public void cancel() "/>
        <method signature="public void cancel(int) "/>
        <method signature="public void layoutChange(android.view.ViewGroup) "/>
    </class>
    <class name="com.android.internal.telephony.MccTable">
        <method signature="public static java.util.Locale getLocaleForLanguageCountry(android.content.Context, java.lang.String, java.lang.String) "/>
        <method signature="public static void setSystemLocale(android.content.Context, java.lang.String, java.lang.String) "/>
    </class>
    <class name="android.widget.NumberPicker">
        <method signature="public static final android.widget.NumberPicker.Formatter getTwoDigitFormatter() "/>
    </class>
    <class name="android.media.Metadata">
        <method signature="public boolean parse(android.os.Parcel) "/>
        <method signature="public java.lang.String getString(int) "/>
        <method signature="public int getInt(int) "/>
        <method signature="public long getLong(int) "/>
        <method signature="public double getDouble(int) "/>
        <method signature="public byte[] getByteArray(int) "/>
        <method signature="public java.util.Date getDate(int) "/>
        <method signature="public static int lastSytemId() "/>
        <method signature="public static int firstCustomId() "/>
        <method signature="public static int lastType() "/>
    </class>
    <class name="android.app.backup.BackupDataInput">
        <method signature="protected void finalize() throws java.lang.Throwable"/>
    </class>
    <class name="android.content.res.AssetManager">
        <method signature="public static android.content.res.AssetManager getSystem() "/>
        <method signature="public final java.io.InputStream openNonAsset(java.lang.String) throws java.io.IOException"/>
        <method signature="public final java.io.InputStream openNonAsset(java.lang.String, int) throws java.io.IOException"/>
        <method signature="public final java.io.InputStream openNonAsset(int, java.lang.String) throws java.io.IOException"/>
        <method signature="public final java.io.InputStream openNonAsset(int, java.lang.String, int) throws java.io.IOException"/>
        <method signature="public final int addAssetPath(java.lang.String) "/>
        <method signature="public final int[] addAssetPaths(java.lang.String[]) "/>
        <method signature="public final native boolean isUpToDate() "/>
        <method signature="public final native void setLocale(java.lang.String) "/>
        <method signature="public final native void setConfiguration(int, int, java.lang.String, int, int, int, int, int, int, int, int, int, int, int, int, int, int) "/>
        <method signature="public final native java.lang.String getCookieName(int) "/>
        <method signature="public static final native int getGlobalAssetCount() "/>
        <method signature="public static final native java.lang.String getAssetAllocations() "/>
        <method signature="public static final native int getGlobalAssetManagerCount() "/>
    </class>
    <class name="com.android.internal.telephony.PhoneProxy">
        <method signature="public int getVoiceMessageCount() "/>
    </class>
    <class name="android.graphics.drawable.BitmapDrawable">
        <method signature="public void setXfermode(android.graphics.Xfermode) "/>
    </class>
    <class name="android.provider.Settings.System">
        <method signature="public static void getMovedKeys(HashSet&lt;java.lang.String&gt;) "/>
        <method signature="public static void getNonLegacyMovedKeys(HashSet&lt;java.lang.String&gt;) "/>
        <method signature="public static java.lang.String getStringForUser(android.content.ContentResolver, java.lang.String, int) "/>
        <method signature="public static boolean putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int) "/>
        <method signature="public static int getIntForUser(android.content.ContentResolver, java.lang.String, int, int) "/>
        <method signature="public static int getIntForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings.SettingNotFoundException"/>
        <method signature="public static boolean putIntForUser(android.content.ContentResolver, java.lang.String, int, int) "/>
        <method signature="public static long getLongForUser(android.content.ContentResolver, java.lang.String, long, int) "/>
        <method signature="public static long getLongForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings.SettingNotFoundException"/>
        <method signature="public static boolean putLongForUser(android.content.ContentResolver, java.lang.String, long, int) "/>
        <method signature="public static float getFloatForUser(android.content.ContentResolver, java.lang.String, float, int) "/>
        <method signature="public static float getFloatForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings.SettingNotFoundException"/>
        <method signature="public static boolean putFloatForUser(android.content.ContentResolver, java.lang.String, float, int) "/>
        <method signature="public static void getConfigurationForUser(android.content.ContentResolver, android.content.res.Configuration, int) "/>
        <method signature="public static void clearConfiguration(android.content.res.Configuration) "/>
        <method signature="public static boolean putConfigurationForUser(android.content.ContentResolver, android.content.res.Configuration, int) "/>
        <method signature="public static boolean hasInterestingConfigurationChanges(int) "/>
        <method signature="public static boolean getShowGTalkServiceStatusForUser(android.content.ContentResolver, int) "/>
        <method signature="public static void setShowGTalkServiceStatusForUser(android.content.ContentResolver, boolean, int) "/>
    </class>
    <class name="android.net.wifi.p2p.WifiP2pDeviceList">
        <method signature="public boolean clear() "/>
        <method signature="public void update(android.net.wifi.p2p.WifiP2pDevice) "/>
        <method signature="public boolean remove(android.net.wifi.p2p.WifiP2pDevice) "/>
        <method signature="public android.net.wifi.p2p.WifiP2pDevice remove(java.lang.String) "/>
        <method signature="public boolean remove(android.net.wifi.p2p.WifiP2pDeviceList) "/>
        <method signature="public boolean isGroupOwner(java.lang.String) "/>
    </class>
    <class name="android.print.PrintAttributes">
        <method signature="public void setMediaSize(android.print.PrintAttributes.MediaSize) "/>
        <method signature="public void setResolution(android.print.PrintAttributes.Resolution) "/>
        <method signature="public void setMinMargins(android.print.PrintAttributes.Margins) "/>
        <method signature="public void setColorMode(int) "/>
        <method signature="public void clear() "/>
        <method signature="public void copyFrom(android.print.PrintAttributes) "/>
    </class>
    <class name="android.os.BatteryStats.Uid">
        <method signature="public abstract int getUid() "/>
    </class>
    <class name="android.content.ContentProviderClient">
        <method signature="public void setDetectNotResponding(long) "/>
        <method signature="public static void releaseQuietly(android.content.ContentProviderClient) "/>
    </class>
    <class name="android.view.textservice.TextServicesManager">
        <method signature="public static android.view.textservice.TextServicesManager getInstance() "/>
        <method signature="public android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers() "/>
        <method signature="public android.view.textservice.SpellCheckerInfo getCurrentSpellChecker() "/>
        <method signature="public void setCurrentSpellChecker(android.view.textservice.SpellCheckerInfo) "/>
        <method signature="public android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(boolean) "/>
        <method signature="public void setSpellCheckerSubtype(android.view.textservice.SpellCheckerSubtype) "/>
        <method signature="public void setSpellCheckerEnabled(boolean) "/>
        <method signature="public boolean isSpellCheckerEnabled() "/>
    </class>
    <class name="android.view.KeyCharacterMap">
        <method signature="public android.view.KeyCharacterMap.FallbackAction getFallbackAction(int, int) "/>
    </class>
    <class name="android.print.PrintJobInfo">
        <method signature="public void setId(android.print.PrintJobId) "/>
        <method signature="public void setLabel(java.lang.String) "/>
        <method signature="public void setPrinterId(android.print.PrinterId) "/>
        <method signature="public java.lang.String getPrinterName() "/>
        <method signature="public void setPrinterName(java.lang.String) "/>
        <method signature="public void setState(int) "/>
        <method signature="public int getAppId() "/>
        <method signature="public void setAppId(int) "/>
        <method signature="public java.lang.String getTag() "/>
        <method signature="public void setTag(java.lang.String) "/>
        <method signature="public void setCreationTime(long) "/>
        <method signature="public void setCopies(int) "/>
        <method signature="public java.lang.String getStateReason() "/>
        <method signature="public void setStateReason(java.lang.String) "/>
        <method signature="public void setPages(android.print.PageRange[]) "/>
        <method signature="public void setAttributes(android.print.PrintAttributes) "/>
        <method signature="public android.print.PrintDocumentInfo getDocumentInfo() "/>
        <method signature="public void setDocumentInfo(android.print.PrintDocumentInfo) "/>
        <method signature="public boolean isCancelling() "/>
        <method signature="public void setCancelling(boolean) "/>
        <method signature="public boolean hasAdvancedOption(java.lang.String) "/>
        <method signature="public java.lang.String getAdvancedStringOption(java.lang.String) "/>
        <method signature="public int getAdvancedIntOption(java.lang.String) "/>
        <method signature="public android.os.Bundle getAdvancedOptions() "/>
        <method signature="public void setAdvancedOptions(android.os.Bundle) "/>
        <method signature="public static java.lang.String stateToString(int) "/>
    </class>
    <class name="android.text.BidiFormatter">
        <method signature="public java.lang.String markAfter(java.lang.String, android.text.TextDirectionHeuristic) "/>
        <method signature="public java.lang.String markBefore(java.lang.String, android.text.TextDirectionHeuristic) "/>
    </class>
    <class name="android.accounts.AccountManagerResponse">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.appwidget.AppWidgetHost">
        <method signature="public static int allocateAppWidgetIdForPackage(int, int, java.lang.String) "/>
        <method signature="public int[] getAppWidgetIds() "/>
        <method signature="public static void deleteAppWidgetIdForSystem(int, int) "/>
        <method signature="public static void deleteAllHosts(int) "/>
    </class>
    <class name="android.view.ViewConfiguration">
        <method signature="public static int getDoubleTapMinTime() "/>
        <method signature="public static int getHoverTapTimeout() "/>
        <method signature="public static int getHoverTapSlop() "/>
        <method signature="public int getScaledDoubleTapTouchSlop() "/>
        <method signature="public static int getDoubleTapSlop() "/>
        <method signature="public static long getSendRecurringAccessibilityEventsInterval() "/>
        <method signature="public boolean isFadingMarqueeEnabled() "/>
    </class>
    <class name="android.provider.Browser">
        <method signature="public static final void sendString(android.content.Context, java.lang.String, java.lang.String) "/>
        <method signature="public static final java.lang.String[] getVisitedHistory(android.content.ContentResolver) "/>
    </class>
    <class name="android.widget.AbsSeekBar">
        <method signature="public void onResolveDrawables(int) "/>
    </class>
    <class name="android.support.v8.renderscript.Type.Builder">
        <method signature="public android.support.v8.renderscript.Type.Builder setYuvFormat(int) "/>
    </class>
    <class name="android.view.VelocityTracker">
        <method signature="public static android.view.VelocityTracker obtain(java.lang.String) "/>
        <method signature="public boolean getEstimator(int, android.view.VelocityTracker.Estimator) "/>
    </class>
    <class name="android.test.suitebuilder.TestSuiteBuilder">
        <method signature="public android.test.suitebuilder.TestSuiteBuilder addTestClassByName(java.lang.String, java.lang.String, android.content.Context) "/>
        <method signature="public android.test.suitebuilder.TestSuiteBuilder addTestSuite(junit.framework.TestSuite) "/>
        <method signature="protected android.test.suitebuilder.TestGrouping getTestGrouping() "/>
    </class>
    <class name="android.os.Message">
        <method signature="public boolean isAsynchronous() "/>
        <method signature="public void setAsynchronous(boolean) "/>
    </class>
    <class name="android.inputmethodservice.InputMethodService">
        <method signature="public void onExtractedDeleteText(int, int) "/>
        <method signature="public void onExtractedReplaceText(int, int, java.lang.CharSequence) "/>
        <method signature="public void onExtractedSetSpan(java.lang.Object, int, int, int) "/>
    </class>
    <class name="android.media.RemoteControlClient">
        <method signature="public void setPlaybackInformation(int, int) "/>
        <method signature="public int getIntPlaybackInformation(int) "/>
        <method signature="public android.app.PendingIntent getRcMediaIntent() "/>
        <method signature="public IRemoteControlClient getIRemoteControlClient() "/>
        <method signature="public void setRcseId(int) "/>
        <method signature="public int getRcseId() "/>
    </class>
    <class name="android.hardware.input.InputManager">
        <method signature="public static android.hardware.input.InputManager getInstance() "/>
        <method signature="public android.view.InputDevice getInputDeviceByDescriptor(java.lang.String) "/>
        <method signature="public android.hardware.input.KeyboardLayout[] getKeyboardLayouts() "/>
        <method signature="public android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String) "/>
        <method signature="public java.lang.String getCurrentKeyboardLayoutForInputDevice(java.lang.String) "/>
        <method signature="public void setCurrentKeyboardLayoutForInputDevice(java.lang.String, java.lang.String) "/>
        <method signature="public java.lang.String[] getKeyboardLayoutsForInputDevice(java.lang.String) "/>
        <method signature="public void addKeyboardLayoutForInputDevice(java.lang.String, java.lang.String) "/>
        <method signature="public void removeKeyboardLayoutForInputDevice(java.lang.String, java.lang.String) "/>
        <method signature="public int getPointerSpeed(android.content.Context) "/>
        <method signature="public void setPointerSpeed(android.content.Context, int) "/>
        <method signature="public void tryPointerSpeed(int) "/>
        <method signature="public boolean[] deviceHasKeys(int[]) "/>
        <method signature="public boolean[] deviceHasKeys(int, int[]) "/>
        <method signature="public boolean injectInputEvent(android.view.InputEvent, int) "/>
        <method signature="public android.os.Vibrator getInputDeviceVibrator(int) "/>
    </class>
    <class name="android.media.audiofx.LoudnessEnhancer">
        <method signature="public void setParameterListener(android.media.audiofx.LoudnessEnhancer.OnParameterChangeListener) "/>
        <method signature="public android.media.audiofx.LoudnessEnhancer.Settings getProperties() throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException"/>
        <method signature="public void setProperties(android.media.audiofx.LoudnessEnhancer.Settings) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException, java.lang.UnsupportedOperationException"/>
    </class>
    <class name="android.net.LinkQualityInfo">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
        <method signature="public void writeToParcel(android.os.Parcel, int, int) "/>
        <method signature="protected void initializeFromParcel(android.os.Parcel) "/>
        <method signature="public void setNetworkType(int) "/>
        <method signature="public void setNormalizedSignalStrength(int) "/>
        <method signature="public void setPacketCount(long) "/>
        <method signature="public void setPacketErrorCount(long) "/>
        <method signature="public void setTheoreticalTxBandwidth(int) "/>
        <method signature="public void setTheoreticalRxBandwidth(int) "/>
        <method signature="public void setTheoreticalLatency(int) "/>
        <method signature="public void setLastDataSampleTime(long) "/>
        <method signature="public void setDataSampleDuration(int) "/>
    </class>
    <class name="android.view.Choreographer">
        <method signature="public static long getFrameDelay() "/>
        <method signature="public static void setFrameDelay(long) "/>
        <method signature="public static long subtractFrameDelay(long) "/>
        <method signature="public void postCallback(int, java.lang.Runnable, java.lang.Object) "/>
        <method signature="public void postCallbackDelayed(int, java.lang.Runnable, java.lang.Object, long) "/>
        <method signature="public void removeCallbacks(int, java.lang.Runnable, java.lang.Object) "/>
        <method signature="public long getFrameTime() "/>
        <method signature="public long getFrameTimeNanos() "/>
    </class>
    <class name="android.content.ContentProviderOperation">
        <method signature="public int getType() "/>
    </class>
    <class name="android.view.ActionProvider">
        <method signature="public void subUiVisibilityChanged(boolean) "/>
        <method signature="public void setSubUiVisibilityListener(android.view.ActionProvider.SubUiVisibilityListener) "/>
    </class>
    <class name="android.view.MotionEvent.PointerProperties">
        <method signature="public static android.view.MotionEvent.PointerProperties[] createArray(int) "/>
    </class>
    <class name="android.hardware.camera2.CameraMetadata.Key">
        <method signature="public final int getTag() "/>
        <method signature="public final Class&lt;T&gt; getType() "/>
    </class>
    <class name="android.app.Service">
        <method signature="public final void setForeground(boolean) "/>
        <method signature="public final void attach(android.content.Context, android.app.ActivityThread, java.lang.String, android.os.IBinder, android.app.Application, java.lang.Object) "/>
    </class>
    <class name="android.net.SSLCertificateSocketFactory">
        <method signature="public static void verifyHostname(java.net.Socket, java.lang.String) throws java.io.IOException"/>
        <method signature="public void setAlpnProtocols(byte[][]) "/>
        <method signature="public byte[] getAlpnSelectedProtocol(java.net.Socket) "/>
        <method signature="public void setChannelIdPrivateKey(java.security.PrivateKey) "/>
        <method signature="public void setSoWriteTimeout(java.net.Socket, int) throws java.net.SocketException"/>
    </class>
    <class name="android.telephony.CellInfoWcdma">
        <method signature="public void setCellIdentity(android.telephony.CellIdentityWcdma) "/>
        <method signature="public void setCellSignalStrength(android.telephony.CellSignalStrengthWcdma) "/>
        <method signature="protected static android.telephony.CellInfoWcdma createFromParcelBody(android.os.Parcel) "/>
    </class>
    <class name="android.widget.TextClock">
        <method signature="public java.lang.CharSequence getFormat() "/>
    </class>
    <class name="android.util.DisplayMetrics">
        <method signature="public boolean equalsPhysical(android.util.DisplayMetrics) "/>
    </class>
    <class name="android.bluetooth.BluetoothHealthAppConfiguration">
        <method signature="public int getChannelType() "/>
    </class>
    <class name="android.app.ActivityGroup">
        <method signature="public HashMap&lt;java.lang.String,java.lang.Object&gt; onRetainNonConfigurationChildInstances() "/>
    </class>
    <class name="android.net.NetworkPolicyManager">
        <method signature="public static long computeLastCycleBoundary(long, android.net.NetworkPolicy) "/>
        <method signature="public static long computeNextCycleBoundary(long, android.net.NetworkPolicy) "/>
        <method signature="public static void snapToCycleDay(android.text.format.Time, int) "/>
        <method signature="public static void dumpPolicy(java.io.PrintWriter, int) "/>
        <method signature="public static void dumpRules(java.io.PrintWriter, int) "/>
    </class>
    <class name="android.net.wifi.WifiConfiguration">
        <method signature="public boolean isValid() "/>
        <method signature="public java.lang.String getPrintableSsid() "/>
        <method signature="public int getAuthType() "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.telephony.CellLocation">
        <method signature="public static android.telephony.CellLocation newFromBundle(android.os.Bundle) "/>
        <method signature="public abstract void fillInNotifierBundle(android.os.Bundle) "/>
        <method signature="public abstract boolean isEmpty() "/>
    </class>
    <class name="android.telephony.PhoneStateListener">
        <method signature="public void onOtaspChanged(int) "/>
    </class>
    <class name="android.os.Trace">
        <method signature="public static boolean isTagEnabled(long) "/>
        <method signature="public static void traceCounter(long, java.lang.String, int) "/>
        <method signature="public static void setAppTracingAllowed(boolean) "/>
        <method signature="public static void setTracingEnabled(boolean) "/>
        <method signature="public static void traceBegin(long, java.lang.String) "/>
        <method signature="public static void traceEnd(long) "/>
        <method signature="public static void asyncTraceBegin(long, java.lang.String, int) "/>
        <method signature="public static void asyncTraceEnd(long, java.lang.String, int) "/>
    </class>
    <class name="android.graphics.Shader">
        <method signature="protected android.graphics.Shader copy() "/>
        <method signature="protected void copyLocalMatrix(android.graphics.Shader) "/>
    </class>
    <class name="android.os.Bundle">
        <method signature="public static android.os.Bundle forPair(java.lang.String, java.lang.String) "/>
        <method signature="public java.lang.String getPairValue() "/>
        <method signature="public boolean setAllowFds(boolean) "/>
        <method signature="public boolean isParcelled() "/>
        <method signature="public void putParcelableList(java.lang.String, List&lt;? extends android.os.Parcelable&gt;) "/>
        <method signature="public void putIBinder(java.lang.String, android.os.IBinder) "/>
        <method signature="public android.os.IBinder getIBinder(java.lang.String) "/>
    </class>
    <class name="android.net.wifi.p2p.nsd.WifiP2pServiceRequest">
        <method signature="public int getTransactionId() "/>
        <method signature="public void setTransactionId(int) "/>
        <method signature="public java.lang.String getSupplicantQuery() "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.view.Window">
        <method signature="public final void destroy() "/>
        <method signature="public final boolean isDestroyed() "/>
        <method signature="public void addPrivateFlags(int) "/>
        <method signature="public void setCloseOnTouchOutside(boolean) "/>
        <method signature="public void setCloseOnTouchOutsideIfNotSet(boolean) "/>
        <method signature="public abstract void alwaysReadCloseOnTouchAttr() "/>
        <method signature="public boolean shouldCloseOnTouch(android.content.Context, android.view.MotionEvent) "/>
        <method signature="protected void removeFeature(int) "/>
        <method signature="protected boolean haveDimAmount() "/>
        <method signature="public void setDefaultIcon(int) "/>
        <method signature="public void setDefaultLogo(int) "/>
    </class>
    <class name="android.view.SurfaceView">
        <method signature="protected boolean setFrame(int, int, int, int) "/>
        <method signature="public void setWindowType(int) "/>
        <method signature="public boolean isFixedSize() "/>
    </class>
    <class name="android.support.v7.widget.SearchView">
        <method signature="public void setAppSearchData(android.os.Bundle) "/>
        <method signature="public boolean requestFocus(int, android.graphics.Rect) "/>
        <method signature="public void clearFocus() "/>
    </class>
    <class name="android.renderscript.Allocation">
        <method signature="public void ioSendOutput() "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, byte[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, short[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, int[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, float[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, android.renderscript.Allocation, int, int, int) "/>
        <method signature="public void setSurfaceTexture(android.graphics.SurfaceTexture) "/>
    </class>
    <class name="android.media.MediaRouter.RouteInfo">
        <method signature="public int getStatusCode() "/>
        <method signature="public boolean matchesTypes(int) "/>
        <method signature="public java.lang.String getDeviceAddress() "/>
        <method signature="public boolean isSelected() "/>
        <method signature="public boolean isDefault() "/>
        <method signature="public void select() "/>
    </class>
    <class name="android.graphics.drawable.StateListDrawable">
        <method signature="public int getStateCount() "/>
        <method signature="public int[] getStateSet(int) "/>
        <method signature="public android.graphics.drawable.Drawable getStateDrawable(int) "/>
        <method signature="public int getStateDrawableIndex(int[]) "/>
        <method signature="public void setLayoutDirection(int) "/>
    </class>
    <class name="android.app.backup.FullBackup">
        <method signature="public static native int backupToTar(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.backup.BackupDataOutput) "/>
    </class>
    <class name="android.view.accessibility.CaptioningManager.CaptionStyle">
        <method signature="public static android.view.accessibility.CaptioningManager.CaptionStyle getCustomStyle(android.content.ContentResolver) "/>
    </class>
    <class name="android.net.wifi.p2p.WifiP2pGroup">
        <method signature="public void setNetworkName(java.lang.String) "/>
        <method signature="public void setIsGroupOwner(boolean) "/>
        <method signature="public void setOwner(android.net.wifi.p2p.WifiP2pDevice) "/>
        <method signature="public void addClient(java.lang.String) "/>
        <method signature="public void addClient(android.net.wifi.p2p.WifiP2pDevice) "/>
        <method signature="public boolean removeClient(java.lang.String) "/>
        <method signature="public boolean removeClient(android.net.wifi.p2p.WifiP2pDevice) "/>
        <method signature="public boolean isClientListEmpty() "/>
        <method signature="public boolean contains(android.net.wifi.p2p.WifiP2pDevice) "/>
        <method signature="public void setPassphrase(java.lang.String) "/>
        <method signature="public void setInterface(java.lang.String) "/>
        <method signature="public int getNetworkId() "/>
        <method signature="public void setNetworkId(int) "/>
    </class>
    <class name="com.android.layoutlib.bridge.android.BridgeContext">
        <method signature="public int getUserId() "/>
    </class>
    <class name="android.net.Uri">
        <method signature="public java.lang.String toSafeString() "/>
        <method signature="public android.net.Uri getCanonicalUri() "/>
        <method signature="public void checkFileUriExposed(java.lang.String) "/>
    </class>
    <class name="android.app.ActivityOptions">
        <method signature="public static android.app.ActivityOptions makeCustomAnimation(android.content.Context, int, int, android.os.Handler, android.app.ActivityOptions.OnAnimationStartedListener) "/>
        <method signature="public static android.app.ActivityOptions makeThumbnailScaleUpAnimation(android.view.View, android.graphics.Bitmap, int, int, android.app.ActivityOptions.OnAnimationStartedListener) "/>
        <method signature="public static android.app.ActivityOptions makeThumbnailScaleDownAnimation(android.view.View, android.graphics.Bitmap, int, int, android.app.ActivityOptions.OnAnimationStartedListener) "/>
        <method signature="public java.lang.String getPackageName() "/>
        <method signature="public int getAnimationType() "/>
        <method signature="public int getCustomEnterResId() "/>
        <method signature="public int getCustomExitResId() "/>
        <method signature="public android.graphics.Bitmap getThumbnail() "/>
        <method signature="public int getStartX() "/>
        <method signature="public int getStartY() "/>
        <method signature="public int getStartWidth() "/>
        <method signature="public int getStartHeight() "/>
        <method signature="public IRemoteCallback getOnAnimationStartListener() "/>
        <method signature="public void abort() "/>
        <method signature="public static void abort(android.os.Bundle) "/>
    </class>
    <class name="android.os.SystemClock">
        <method signature="public static native long currentThreadTimeMicro() "/>
        <method signature="public static native long currentTimeMicro() "/>
    </class>
    <class name="android.net.wifi.p2p.nsd.WifiP2pServiceResponse">
        <method signature="public int getTransactionId() "/>
        <method signature="public void setSrcDevice(android.net.wifi.p2p.WifiP2pDevice) "/>
        <method signature="public static List&lt;android.net.wifi.p2p.nsd.WifiP2pServiceResponse&gt; newInstance(java.lang.String) "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.app.backup.BackupDataOutput">
        <method signature="public void setKeyPrefix(java.lang.String) "/>
        <method signature="protected void finalize() throws java.lang.Throwable"/>
    </class>
    <class name="java.lang.Thread">
        <method signature="public final void pushInterruptAction$(java.lang.Runnable) "/>
        <method signature="public final void popInterruptAction$(java.lang.Runnable) "/>
        <method signature="public void unpark() "/>
        <method signature="public void parkFor(long) "/>
        <method signature="public void parkUntil(long) "/>
    </class>
    <class name="java.lang.reflect.Method">
        <method signature="public int getDexMethodIndex() "/>
    </class>
    <class name="android.app.ActivityManager">
        <method signature="public int getFrontActivityScreenCompatMode() "/>
        <method signature="public void setFrontActivityScreenCompatMode(int) "/>
        <method signature="public int getPackageScreenCompatMode(java.lang.String) "/>
        <method signature="public void setPackageScreenCompatMode(java.lang.String, int) "/>
        <method signature="public boolean getPackageAskScreenCompat(java.lang.String) "/>
        <method signature="public void setPackageAskScreenCompat(java.lang.String, boolean) "/>
        <method signature="public static int staticGetMemoryClass() "/>
        <method signature="public static int staticGetLargeMemoryClass() "/>
        <method signature="public static boolean isLowRamDeviceStatic() "/>
        <method signature="public static boolean isHighEndGfx() "/>
        <method signature="public List&lt;android.app.ActivityManager.RecentTaskInfo&gt; getRecentTasksForUser(int, int, int) throws java.lang.SecurityException"/>
        <method signature="public List&lt;android.app.ActivityManager.RunningTaskInfo&gt; getRunningTasks(int, int, IThumbnailReceiver) throws java.lang.SecurityException"/>
        <method signature="public boolean removeSubTask(int, int) throws java.lang.SecurityException"/>
        <method signature="public boolean removeTask(int, int) throws java.lang.SecurityException"/>
        <method signature="public android.app.ActivityManager.TaskThumbnails getTaskThumbnails(int) throws java.lang.SecurityException"/>
        <method signature="public android.graphics.Bitmap getTaskTopThumbnail(int) throws java.lang.SecurityException"/>
        <method signature="public boolean clearApplicationUserData(java.lang.String, IPackageDataObserver) "/>
        <method signature="public List&lt;android.content.pm.ApplicationInfo&gt; getRunningExternalApplications() "/>
        <method signature="public void forceStopPackage(java.lang.String) "/>
        <method signature="public Map&lt;java.lang.String,java.lang.Integer&gt; getAllPackageLaunchCounts() "/>
        <method signature="public static int checkComponentPermission(java.lang.String, int, int, boolean) "/>
        <method signature="public static int checkUidPermission(java.lang.String, int) "/>
        <method signature="public static int handleIncomingUser(int, int, int, boolean, boolean, java.lang.String, java.lang.String) "/>
        <method signature="public static int getCurrentUser() "/>
        <method signature="public com.android.internal.os.PkgUsageStats[] getAllPackageUsageStats() "/>
        <method signature="public boolean switchUser(int) "/>
        <method signature="public boolean isUserRunning(int) "/>
        <method signature="public static void dumpPackageStateStatic(java.io.FileDescriptor, java.lang.String) "/>
    </class>
    <class name="java.util.Collections">
        <method signature="public static int secondaryHash(java.lang.Object) "/>
        <method signature="public static int secondaryIdentityHash(java.lang.Object) "/>
        <method signature="public static int roundUpToPowerOfTwo(int) "/>
    </class>
    <class name="android.view.animation.AnimationSet">
        <method signature="public boolean hasAlpha() "/>
        <method signature="public void initializeInvalidateRegion(int, int, int, int) "/>
    </class>
    <class name="android.view.ViewOverlay.OverlayViewGroup">
        <method signature="protected android.view.ViewParent invalidateChildInParentFast(int, int, android.graphics.Rect) "/>
    </class>
    <class name="android.hardware.camera2.CaptureRequest">
        <method signature="public void readFromParcel(android.os.Parcel) "/>
    </class>
    <class name="android.net.sip.SipManager">
        <method signature="public static android.content.Intent createIncomingCallBroadcast(java.lang.String, java.lang.String) "/>
        <method signature="public android.net.sip.SipProfile[] getListOfProfiles() "/>
    </class>
    <class name="android.content.BroadcastReceiver.PendingResult">
        <method signature="public void setExtrasClassLoader(java.lang.ClassLoader) "/>
        <method signature="public void sendFinished(android.app.IActivityManager) "/>
        <method signature="public int getSendingUserId() "/>
    </class>
    <class name="android.content.BroadcastReceiver">
        <method signature="public final void setPendingResult(android.content.BroadcastReceiver.PendingResult) "/>
        <method signature="public final android.content.BroadcastReceiver.PendingResult getPendingResult() "/>
        <method signature="public int getSendingUserId() "/>
    </class>
    <class name="android.net.nsd.NsdServiceInfo">
        <method signature="public android.net.nsd.DnsSdTxtRecord getTxtRecord() "/>
        <method signature="public void setTxtRecord(android.net.nsd.DnsSdTxtRecord) "/>
    </class>
    <class name="android.accessibilityservice.AccessibilityServiceInfo">
        <method signature="public void updateDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo) "/>
        <method signature="public void setComponentName(android.content.ComponentName) "/>
        <method signature="public void setCapabilities(int) "/>
        <method signature="public List&lt;android.accessibilityservice.AccessibilityServiceInfo.CapabilityInfo&gt; getCapabilityInfos() "/>
    </class>
    <class name="android.bluetooth.BluetoothGatt">
        <method signature="public boolean refresh() "/>
    </class>
    <class name="android.app.FragmentManager">
        <method signature="public android.app.FragmentTransaction openTransaction() "/>
    </class>
    <class name="android.webkit.WebSettings">
        <method signature="public void setNavDump(boolean) "/>
        <method signature="public boolean getNavDump() "/>
        <method signature="public void setUseWebViewBackgroundForOverscrollBackground(boolean) "/>
        <method signature="public boolean getUseWebViewBackgroundForOverscrollBackground() "/>
        <method signature="public synchronized void setUseDoubleTree(boolean) "/>
        <method signature="public synchronized boolean getUseDoubleTree() "/>
        <method signature="public synchronized void setUserAgent(int) "/>
        <method signature="public synchronized int getUserAgent() "/>
        <method signature="public synchronized void setPluginsEnabled(boolean) "/>
        <method signature="public synchronized void setPluginsPath(java.lang.String) "/>
        <method signature="public synchronized boolean getPluginsEnabled() "/>
        <method signature="public synchronized java.lang.String getPluginsPath() "/>
    </class>
    <class name="android.telephony.gsm.SmsMessage">
        <method signature="public static android.telephony.gsm.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, byte[]) "/>
        <method signature="public int getStatusOnIcc() "/>
        <method signature="public int getIndexOnIcc() "/>
    </class>
    <class name="android.view.accessibility.AccessibilityRecord">
        <method signature="public void setWindowId(int) "/>
        <method signature="public boolean isImportantForAccessibility() "/>
        <method signature="public long getSourceNodeId() "/>
        <method signature="public void setConnectionId(int) "/>
        <method signature="public void setSealed(boolean) "/>
    </class>
    <class name="android.media.MediaFormat">
        <method signature="public final int getInteger(java.lang.String, int) "/>
    </class>
    <class name="android.speech.srec.Recognizer">
        <method signature="public void resetAcousticState() "/>
        <method signature="public void setAcousticState(java.lang.String) "/>
        <method signature="public java.lang.String getAcousticState() "/>
    </class>
    <class name="android.widget.AbsListView">
        <method signature="protected boolean isVerticalScrollBarHidden() "/>
        <method signature="public android.view.View findViewByAccessibilityIdTraversal(int) "/>
        <method signature="protected boolean setFrame(int, int, int, int) "/>
        <method signature="public boolean showContextMenu(float, float, int) "/>
        <method signature="public void setOverScrollEffectPadding(int, int) "/>
        <method signature="public void setRemoteViewsOnClickHandler(android.widget.RemoteViews.OnClickHandler) "/>
    </class>
    <class name="android.webkit.WebIconDatabase">
        <method signature="public void bulkRequestIconForPageUrl(android.content.ContentResolver, java.lang.String, android.webkit.WebIconDatabase.IconListener) "/>
    </class>
    <class name="android.view.PointerIcon">
        <method signature="public android.view.PointerIcon load(android.content.Context) "/>
    </class>
    <class name="android.app.DownloadManager.Request">
        <method signature="public android.app.DownloadManager.Request setDestinationToSystemCache() "/>
    </class>
    <class name="android.widget.Chronometer">
        <method signature="public void setStarted(boolean) "/>
    </class>
    <class name="android.os.NullVibrator">
        <method signature="public void vibrate(int, java.lang.String, long) "/>
        <method signature="public void vibrate(int, java.lang.String, long[], int) "/>
    </class>
    <class name="android.media.SubtitleController.Anchor">
        <method signature="public abstract void setSubtitleWidget(android.media.SubtitleTrack.RenderingWidget) "/>
        <method signature="public abstract android.os.Looper getSubtitleLooper() "/>
    </class>
    <class name="android.service.textservice.SpellCheckerService.Session">
        <method signature="public final void setInternalISpellCheckerSession(android.service.textservice.SpellCheckerService.InternalISpellCheckerSession) "/>
    </class>
    <class name="android.bluetooth.BluetoothInputDevice">
        <method signature="public boolean connect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean disconnect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean setPriority(android.bluetooth.BluetoothDevice, int) "/>
        <method signature="public int getPriority(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean virtualUnplug(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean getProtocolMode(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean setProtocolMode(android.bluetooth.BluetoothDevice, int) "/>
        <method signature="public boolean getReport(android.bluetooth.BluetoothDevice, byte, byte, int) "/>
        <method signature="public boolean setReport(android.bluetooth.BluetoothDevice, byte, java.lang.String) "/>
        <method signature="public boolean sendData(android.bluetooth.BluetoothDevice, java.lang.String) "/>
    </class>
    <class name="android.graphics.drawable.ClipDrawable">
        <method signature="public void setLayoutDirection(int) "/>
    </class>
    <class name="android.preference.Preference">
        <method signature="public void performClick(android.preference.PreferenceScreen) "/>
        <method signature="public boolean onKey(android.view.View, int, android.view.KeyEvent) "/>
        <method signature="protected boolean persistStringSet(Set&lt;java.lang.String&gt;) "/>
        <method signature="protected Set&lt;java.lang.String&gt; getPersistedStringSet(Set&lt;java.lang.String&gt;) "/>
    </class>
    <class name="java.lang.Enum">
        <method signature="public static T[] getSharedConstants(Class&lt;T&gt;) "/>
    </class>
    <class name="android.content.pm.PackageItemInfo">
        <method signature="protected android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager) "/>
        <method signature="protected android.graphics.drawable.Drawable loadDefaultLogo(android.content.pm.PackageManager) "/>
        <method signature="protected android.content.pm.ApplicationInfo getApplicationInfo() "/>
    </class>
    <class name="android.os.Vibrator">
        <method signature="public abstract void vibrate(int, java.lang.String, long) "/>
        <method signature="public abstract void vibrate(int, java.lang.String, long[], int) "/>
    </class>
    <class name="android.opengl.EGLLogWrapper">
        <method signature="public boolean eglReleaseThread() "/>
    </class>
    <class name="android.database.AbstractWindowedCursor">
        <method signature="protected void closeWindow() "/>
        <method signature="protected void clearOrCreateWindow(java.lang.String) "/>
        <method signature="protected void onDeactivateOrClose() "/>
    </class>
    <class name="android.view.WindowManager.LayoutParams">
        <method signature="public void scale(float) "/>
    </class>
    <class name="android.content.SyncContext">
        <method signature="public void setStatusText(java.lang.String) "/>
    </class>
    <class name="android.provider.DocumentsContract">
        <method signature="public static android.net.Uri setManageMode(android.net.Uri) "/>
        <method signature="public static boolean isManageMode(android.net.Uri) "/>
        <method signature="public static android.graphics.Bitmap getDocumentThumbnail(android.content.ContentProviderClient, android.net.Uri, android.graphics.Point, android.os.CancellationSignal) throws android.os.RemoteException, java.io.IOException"/>
        <method signature="public static android.net.Uri createDocument(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String) "/>
        <method signature="public static android.net.Uri createDocument(android.content.ContentProviderClient, android.net.Uri, java.lang.String, java.lang.String) throws android.os.RemoteException"/>
        <method signature="public static void deleteDocument(android.content.ContentProviderClient, android.net.Uri) throws android.os.RemoteException"/>
        <method signature="public static android.content.res.AssetFileDescriptor openImageThumbnail(java.io.File) throws java.io.FileNotFoundException"/>
    </class>
    <class name="android.webkit.PluginList">
        <method signature="public synchronized List#RAW getList() "/>
        <method signature="public synchronized void addPlugin(android.webkit.Plugin) "/>
        <method signature="public synchronized void removePlugin(android.webkit.Plugin) "/>
        <method signature="public synchronized void clear() "/>
        <method signature="public synchronized void pluginClicked(android.content.Context, int) "/>
    </class>
    <class name="android.support.v4.app.Fragment">
        <method signature="public final boolean hasOptionsMenu() "/>
        <method signature="public final boolean isMenuVisible() "/>
        <method signature="public android.view.LayoutInflater getLayoutInflater(android.os.Bundle) "/>
    </class>
    <class name="android.widget.EdgeEffect">
        <method signature="public android.graphics.Rect getBounds(boolean) "/>
    </class>
    <class name="android.app.StatusBarManager">
        <method signature="public static java.lang.String windowStateToString(int) "/>
    </class>
    <class name="android.telephony.CellSignalStrength">
        <method signature="public abstract void setDefaultValues() "/>
        <method signature="public abstract android.telephony.CellSignalStrength copy() "/>
    </class>
    <class name="android.test.AndroidTestRunner">
        <method signature="public void setPerformanceResultsWriter(android.os.PerformanceCollector.PerformanceResultsWriter) "/>
    </class>
    <class name="android.view.accessibility.AccessibilityManager">
        <method signature="public static android.view.accessibility.AccessibilityManager getInstance(android.content.Context) "/>
        <method signature="public IAccessibilityManagerClient getClient() "/>
        <method signature="public int addAccessibilityInteractionConnection(IWindow, IAccessibilityInteractionConnection) "/>
        <method signature="public void removeAccessibilityInteractionConnection(IWindow) "/>
    </class>
    <class name="android.net.wifi.BatchedScanSettings">
        <method signature="public boolean isInvalid() "/>
        <method signature="public void constrain() "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.media.SoundPool">
        <method signature="public void setVolume(int, float) "/>
    </class>
    <class name="android.app.WallpaperManager">
        <method signature="public IWallpaperManager getIWallpaperManager() "/>
        <method signature="public android.graphics.Bitmap getBitmap() "/>
    </class>
    <class name="android.graphics.SweepGradient">
        <method signature="protected android.graphics.Shader copy() "/>
    </class>
    <class name="new android.view.accessibility.CaptioningManager.CaptioningChangeListener(){}">
        <method signature="public void onEnabledChanged(boolean) "/>
        <method signature="public void onLocaleChanged(java.util.Locale) "/>
    </class>
    <class name="java.lang.Class">
        <method signature="public native com.android.dex.Dex getDex() "/>
        <method signature="public int getDexClassDefIndex() "/>
        <method signature="public int getDexTypeIndex() "/>
        <method signature="public int getDexAnnotationDirectoryOffset() "/>
        <method signature="public Class&lt;?&gt; getDexCacheType(com.android.dex.Dex, int) "/>
        <method signature="public java.lang.String getDexCacheString(com.android.dex.Dex, int) "/>
    </class>
    <class name="android.database.ContentObserver">
        <method signature="public IContentObserver getContentObserver() "/>
        <method signature="public IContentObserver releaseContentObserver() "/>
    </class>
    <class name="android.os.CancellationSignal">
        <method signature="public void setRemote(ICancellationSignal) "/>
        <method signature="public static ICancellationSignal createTransport() "/>
        <method signature="public static android.os.CancellationSignal fromTransport(ICancellationSignal) "/>
    </class>
    <class name="android.widget.LinearLayout">
        <method signature="public int getDividerWidth() "/>
        <method signature="protected boolean hasDividerBeforeChildAt(int) "/>
    </class>
    <class name="android.content.pm.Signature">
        <method signature="public java.security.PublicKey getPublicKey() throws java.security.cert.CertificateException"/>
        <method signature="public static boolean areExactMatch(android.content.pm.Signature[], android.content.pm.Signature[]) "/>
    </class>
    <class name="android.webkit.WebChromeClient">
        <method signature="public void openFileChooser(ValueCallback&lt;android.net.Uri&gt;, java.lang.String, java.lang.String) "/>
        <method signature="public void setupAutoFill(android.os.Message) "/>
    </class>
    <class name="android.support.v4.app.FragmentActivity">
        <method signature="protected boolean onPrepareOptionsPanel(android.view.View, android.view.Menu) "/>
    </class>
    <class name="com.android.server.accounts.AccountManagerService">
        <method signature="public static com.android.server.accounts.AccountManagerService getSingleton() "/>
        <method signature="public android.accounts.Account[] getAccounts(int) "/>
        <method signature="public android.accounts.AccountAndUser[] getRunningAccounts() "/>
        <method signature="public android.accounts.AccountAndUser[] getAllAccounts() "/>
    </class>
    <class name="android.provider.Settings">
        <method signature="public static java.lang.String getGTalkDeviceId(long) "/>
    </class>
    <class name="android.view.TextureView">
        <method signature="protected void destroyHardwareResources() "/>
    </class>
    <class name="android.content.ContentValues">
        <method signature="public void putStringArrayList(java.lang.String, ArrayList&lt;java.lang.String&gt;) "/>
        <method signature="public ArrayList&lt;java.lang.String&gt; getStringArrayList(java.lang.String) "/>
    </class>
    <class name="android.preference.EditTextPreference">
        <method signature="protected boolean needInputMethod() "/>
    </class>
    <class name="com.android.server.pm.PackageManagerService">
        <method signature="public int installExistingPackageAsUser(java.lang.String, int) "/>
    </class>
    <class name="android.database.sqlite.SQLiteDebug">
        <method signature="public static final boolean shouldLogSlowQuery(long) "/>
    </class>
    <class name="android.hardware.camera2.CaptureRequest.Builder">
        <method signature="public boolean isEmpty() "/>
    </class>
    <class name="android.os.StrictMode">
        <method signature="public static int getThreadPolicyMask() "/>
        <method signature="public static boolean conditionallyEnableDebugLogging() "/>
        <method signature="public static void enableDeathOnNetwork() "/>
        <method signature="public static void conditionallyCheckInstanceCounts() "/>
        <method signature="public static boolean vmSqliteObjectLeaksEnabled() "/>
        <method signature="public static boolean vmClosableObjectLeaksEnabled() "/>
        <method signature="public static boolean vmRegistrationLeaksEnabled() "/>
        <method signature="public static boolean vmFileUriExposureEnabled() "/>
        <method signature="public static void onSqliteObjectLeaked(java.lang.String, java.lang.Throwable) "/>
        <method signature="public static void onWebViewMethodCalledOnWrongThread(java.lang.Throwable) "/>
        <method signature="public static void onIntentReceiverLeaked(java.lang.Throwable) "/>
        <method signature="public static void onServiceConnectionLeaked(java.lang.Throwable) "/>
        <method signature="public static void onFileUriExposed(java.lang.String) "/>
        <method signature="public static void onVmPolicyViolation(java.lang.String, java.lang.Throwable) "/>
        <method signature="public static android.os.StrictMode.Span enterCriticalSpan(java.lang.String) "/>
        <method signature="public static void noteDiskRead() "/>
        <method signature="public static void noteDiskWrite() "/>
        <method signature="public static java.lang.Object trackActivity(java.lang.Object) "/>
        <method signature="public static void incrementExpectedActivityCount(Class#RAW) "/>
        <method signature="public static void decrementExpectedActivityCount(Class#RAW) "/>
    </class>
    <class name="android.net.wifi.p2p.WifiP2pDevice">
        <method signature="public boolean isInvitationCapable() "/>
        <method signature="public boolean isDeviceLimit() "/>
        <method signature="public boolean isGroupLimit() "/>
        <method signature="public void update(android.net.wifi.p2p.WifiP2pDevice) "/>
    </class>
    <class name="android.test.InstrumentationTestRunner">
        <method signature="protected void addTestListener(junit.framework.TestListener) "/>
    </class>
    <class name="android.app.Instrumentation">
        <method signature="public android.app.Instrumentation.ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle) "/>
        <method signature="public void execStartActivities(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent[], android.os.Bundle) "/>
        <method signature="public void execStartActivitiesAsUser(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent[], android.os.Bundle, int) "/>
        <method signature="public android.app.Instrumentation.ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Fragment, android.content.Intent, int, android.os.Bundle) "/>
        <method signature="public android.app.Instrumentation.ActivityResult execStartActivity(android.content.Context, android.os.IBinder, android.os.IBinder, android.app.Activity, android.content.Intent, int, android.os.Bundle, android.os.UserHandle) "/>
    </class>
    <class name="android.net.NetworkUtils">
        <method signature="public static java.net.InetAddress numericToInetAddress(java.lang.String) throws java.lang.IllegalArgumentException"/>
    </class>
    <class name="android.preference.PreferenceActivity">
        <method signature="public List&lt;android.preference.PreferenceActivity.Header&gt; getHeaders() "/>
        <method signature="protected boolean hasNextButton() "/>
        <method signature="protected android.widget.Button getNextButton() "/>
    </class>
    <class name="android.text.format.DateFormat">
        <method signature="public static java.lang.String getTimeFormatString(android.content.Context) "/>
        <method signature="public static java.text.DateFormat getDateFormatForSetting(android.content.Context, java.lang.String) "/>
        <method signature="public static boolean hasSeconds(java.lang.CharSequence) "/>
        <method signature="public static boolean hasDesignator(java.lang.CharSequence, char) "/>
    </class>
    <class name="android.bluetooth.BluetoothPan">
        <method signature="public boolean connect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean disconnect(android.bluetooth.BluetoothDevice) "/>
    </class>
    <class name="android.os.ParcelFileDescriptor">
        <method signature="public static android.os.ParcelFileDescriptor fromData(byte[], java.lang.String) throws java.io.IOException"/>
        <method signature="public long seekTo(long) throws java.io.IOException"/>
        <method signature="public void releaseResources() "/>
    </class>
    <class name="android.provider.Downloads.Impl">
        <method signature="public static java.lang.String statusToString(int) "/>
    </class>
    <class name="android.support.v8.renderscript.Allocation">
        <method signature="public void ioSendOutput() "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, byte[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, short[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, int[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, float[]) "/>
        <method signature="public void copy3DRangeFrom(int, int, int, int, int, int, android.support.v8.renderscript.Allocation, int, int, int) "/>
    </class>
    <class name="android.os.PowerManager.WakeLock">
        <method signature="public void release(int) "/>
    </class>
    <class name="android.widget.CheckedTextView">
        <method signature="protected void internalSetPadding(int, int, int, int) "/>
    </class>
    <class name="android.telephony.gsm.SmsManager">
        <method signature="public final boolean copyMessageToSim(byte[], byte[], int) "/>
        <method signature="public final boolean deleteMessageFromSim(int) "/>
        <method signature="public final boolean updateMessageOnSim(int, int, byte[]) "/>
        <method signature="public final ArrayList&lt;android.telephony.SmsMessage&gt; getAllMessagesFromSim() "/>
    </class>
    <class name="android.database.CursorWindow">
        <method signature="public java.lang.String getName() "/>
    </class>
    <class name="com.android.internal.telephony.SmsMessageBase">
        <method signature="public com.android.internal.telephony.SmsHeader getUserDataHeader() "/>
    </class>
    <class name="java.util.concurrent.Executors">
        <method signature="public static java.util.concurrent.ExecutorService newWorkStealingPool(int) "/>
        <method signature="public static java.util.concurrent.ExecutorService newWorkStealingPool() "/>
    </class>
    <class name="android.net.wifi.BatchedScanResult">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.os.Debug">
        <method signature="public static java.lang.String[] getVmFeatureList() "/>
        <method signature="public static void startMethodTracing(java.lang.String, java.io.FileDescriptor, int, int) "/>
        <method signature="public static void startMethodTracingDdms(int, int, boolean, int) "/>
        <method signature="public static int getMethodTracingMode() "/>
        <method signature="public static native void getMemoryInfo(int, android.os.Debug.MemoryInfo) "/>
        <method signature="public static native long getPss(int, long[]) "/>
        <method signature="public static native void getMemInfo(long[]) "/>
        <method signature="public static void dumpHprofData(java.lang.String, java.io.FileDescriptor) throws java.io.IOException"/>
        <method signature="public static void dumpHprofDataDdms() "/>
        <method signature="public static native void dumpNativeHeap(java.io.FileDescriptor) "/>
        <method signature="public static long countInstancesOfClass(Class#RAW) "/>
        <method signature="public static final boolean cacheRegisterMap(java.lang.String) "/>
        <method signature="public static final void dumpReferenceTables() "/>
        <method signature="public static void setFieldsOn(Class&lt;?&gt;) "/>
        <method signature="public static void setFieldsOn(Class&lt;?&gt;, boolean) "/>
        <method signature="public static native void dumpNativeBacktraceToFile(int, java.lang.String) "/>
        <method signature="public static java.lang.String getCallers(int) "/>
        <method signature="public static java.lang.String getCallers(int, int) "/>
        <method signature="public static java.lang.String getCallers(int, java.lang.String) "/>
        <method signature="public static java.lang.String getCaller() "/>
    </class>
    <class name="android.animation.ValueAnimator">
        <method signature="public static void setDurationScale(float) "/>
        <method signature="public static float getDurationScale() "/>
        <method signature="public static int getCurrentAnimationsCount() "/>
        <method signature="public static void clearAllAnimations() "/>
    </class>
    <class name="android.app.SearchableInfo">
        <method signature="public boolean useBadgeLabel() "/>
        <method signature="public boolean useBadgeIcon() "/>
        <method signature="public android.content.Context getActivityContext(android.content.Context) "/>
        <method signature="public android.content.Context getProviderContext(android.content.Context, android.content.Context) "/>
        <method signature="public android.app.SearchableInfo.ActionKeyInfo findActionKey(int) "/>
        <method signature="public static android.app.SearchableInfo getActivityMetaData(android.content.Context, android.content.pm.ActivityInfo, int) "/>
        <method signature="public int getLabelId() "/>
        <method signature="public int getIconId() "/>
        <method signature="public int getSearchButtonText() "/>
    </class>
    <class name="android.bluetooth.BluetoothGattDescriptor">
        <method signature="public int getInstanceId() "/>
    </class>
    <class name="com.android.vcard.VCardComposer">
        <method signature="public boolean init(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, android.net.Uri) "/>
        <method signature="public boolean init(android.database.Cursor) "/>
        <method signature="public java.lang.String createOneEntry(java.lang.reflect.Method) "/>
    </class>
    <class name="android.content.SyncInfo">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.renderscript.Matrix4f">
        <method signature="public void load(android.renderscript.Matrix3f) "/>
    </class>
    <class name="android.test.mock.MockContentResolver">
        <method signature="protected android.content.IContentProvider acquireProvider(android.content.Context, java.lang.String) "/>
        <method signature="protected android.content.IContentProvider acquireExistingProvider(android.content.Context, java.lang.String) "/>
        <method signature="public boolean releaseProvider(android.content.IContentProvider) "/>
        <method signature="protected android.content.IContentProvider acquireUnstableProvider(android.content.Context, java.lang.String) "/>
        <method signature="public boolean releaseUnstableProvider(android.content.IContentProvider) "/>
        <method signature="public void unstableProviderDied(android.content.IContentProvider) "/>
    </class>
    <class name="android.net.wifi.SupplicantState">
        <method signature="public static boolean isHandshakeState(android.net.wifi.SupplicantState) "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.os.Handler">
        <method signature="public final boolean runWithScissors(java.lang.Runnable, long) "/>
        <method signature="public final boolean hasCallbacks(java.lang.Runnable) "/>
    </class>
    <class name="android.bluetooth.BluetoothServerSocket">
        <method signature="public int getChannel() "/>
    </class>
    <class name="android.view.WindowManagerPolicy">
        <method signature="public abstract void setLastInputMethodWindowLw(android.view.WindowManagerPolicy.WindowState, android.view.WindowManagerPolicy.WindowState) "/>
    </class>
    <class name="android.nfc.tech.BasicTagTechnology">
        <method signature="public void reconnect() throws java.io.IOException"/>
    </class>
    <class name="android.webkit.CacheManager.CacheResult">
        <method signature="public void setContentLength(long) "/>
    </class>
    <class name="java.security.spec.ECParameterSpec">
        <method signature="public java.lang.String getCurveName() "/>
    </class>
    <class name="android.location.Geofence">
        <method signature="public int getType() "/>
        <method signature="public double getLatitude() "/>
        <method signature="public double getLongitude() "/>
        <method signature="public float getRadius() "/>
    </class>
    <class name="android.provider.Settings.Secure">
        <method signature="public static void getMovedKeys(HashSet&lt;java.lang.String&gt;) "/>
        <method signature="public static java.lang.String getStringForUser(android.content.ContentResolver, java.lang.String, int) "/>
        <method signature="public static boolean putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int) "/>
        <method signature="public static int getIntForUser(android.content.ContentResolver, java.lang.String, int, int) "/>
        <method signature="public static int getIntForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings.SettingNotFoundException"/>
        <method signature="public static boolean putIntForUser(android.content.ContentResolver, java.lang.String, int, int) "/>
        <method signature="public static long getLongForUser(android.content.ContentResolver, java.lang.String, long, int) "/>
        <method signature="public static long getLongForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings.SettingNotFoundException"/>
        <method signature="public static boolean putLongForUser(android.content.ContentResolver, java.lang.String, long, int) "/>
        <method signature="public static float getFloatForUser(android.content.ContentResolver, java.lang.String, float, int) "/>
        <method signature="public static float getFloatForUser(android.content.ContentResolver, java.lang.String, int) throws android.provider.Settings.SettingNotFoundException"/>
        <method signature="public static boolean putFloatForUser(android.content.ContentResolver, java.lang.String, float, int) "/>
        <method signature="public static final boolean isLocationProviderEnabledForUser(android.content.ContentResolver, java.lang.String, int) "/>
        <method signature="public static final boolean setLocationProviderEnabledForUser(android.content.ContentResolver, java.lang.String, boolean, int) "/>
    </class>
    <class name="android.hardware.usb.UsbManager">
        <method signature="public boolean isFunctionEnabled(java.lang.String) "/>
        <method signature="public java.lang.String getDefaultFunction() "/>
        <method signature="public void setCurrentFunction(java.lang.String, boolean) "/>
        <method signature="public void setMassStorageBackingFile(java.lang.String) "/>
    </class>
    <class name="android.hardware.Camera">
        <method signature="public final native boolean previewEnabled() "/>
        <method signature="public final void addRawImageCallbackBuffer(byte[]) "/>
        <method signature="public final android.renderscript.Allocation createPreviewAllocation(android.renderscript.RenderScript, int) throws android.renderscript.RSIllegalArgumentException"/>
        <method signature="public final void setPreviewCallbackAllocation(android.renderscript.Allocation) throws java.io.IOException"/>
        <method signature="public static android.hardware.Camera.Parameters getEmptyParameters() "/>
    </class>
    <class name="android.provider.Contacts.People">
        <method signature="public static long tryGetMyContactsGroupId(android.content.ContentResolver) "/>
    </class>
    <class name="android.net.ProxyProperties">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.net.http.HttpsConnection">
        <method signature="public static void initializeEngine(java.io.File) "/>
    </class>
    <class name="android.app.NotificationManager">
        <method signature="public static INotificationManager getService() "/>
        <method signature="public static android.app.NotificationManager from(android.content.Context) "/>
        <method signature="public void notifyAsUser(java.lang.String, int, android.app.Notification, android.os.UserHandle) "/>
        <method signature="public void cancelAsUser(java.lang.String, int, android.os.UserHandle) "/>
    </class>
    <class name="java.io.Console">
        <method signature="public static java.io.Console getConsole() "/>
    </class>
    <class name="android.provider.ContactsContract.Contacts.AggregationSuggestions">
        <method signature="public static final android.provider.ContactsContract.Contacts.AggregationSuggestions.Builder builder() "/>
    </class>
    <class name="android.webkit.WebView">
        <method signature="public int getVisibleTitleHeight() "/>
        <method signature="public static void enablePlatformNotifications() "/>
        <method signature="public static void disablePlatformNotifications() "/>
        <method signature="public boolean savePicture(android.os.Bundle, java.io.File) "/>
        <method signature="public boolean restorePicture(android.os.Bundle, java.io.File) "/>
        <method signature="public java.lang.String getTouchIconUrl() "/>
        <method signature="public int getContentWidth() "/>
        <method signature="public boolean isPaused() "/>
        <method signature="public static synchronized android.webkit.PluginList getPluginList() "/>
        <method signature="public void refreshPlugins(boolean) "/>
        <method signature="public void emulateShiftHeld() "/>
        <method signature="public android.view.View getZoomControls() "/>
        <method signature="public void debugDump() "/>
        <method signature="public void dumpViewHierarchyWithProperties(java.io.BufferedWriter, int) "/>
        <method signature="public android.view.View findHierarchyView(java.lang.String, int) "/>
        <method signature="public android.webkit.WebViewProvider getWebViewProvider() "/>
        <method signature="protected void onDrawVerticalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int) "/>
        <method signature="protected boolean setFrame(int, int, int, int) "/>
    </class>
    <class name="android.app.LocalActivityManager">
        <method signature="public HashMap&lt;java.lang.String,java.lang.Object&gt; dispatchRetainNonConfigurationInstance() "/>
    </class>
    <class name="android.support.v7.internal.widget.ListPopupWindow">
        <method signature="public void setForceIgnoreOutsideTouch(boolean) "/>
        <method signature="public void setDropDownAlwaysVisible(boolean) "/>
        <method signature="public boolean isDropDownAlwaysVisible() "/>
        <method signature="public int getMaxAvailableHeight(android.view.View, int, boolean) "/>
    </class>
    <class name="android.text.DynamicLayout">
        <method signature="public int[] getBlockEndLines() "/>
        <method signature="public int[] getBlockIndices() "/>
        <method signature="public int getNumberOfBlocks() "/>
        <method signature="public int getIndexFirstChangedBlock() "/>
        <method signature="public void setIndexFirstChangedBlock(int) "/>
    </class>
    <class name="android.net.MobileLinkQualityInfo">
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
        <method signature="public static android.net.MobileLinkQualityInfo createFromParcelBody(android.os.Parcel) "/>
        <method signature="public void setMobileNetworkType(int) "/>
        <method signature="public void setRssi(int) "/>
        <method signature="public void setGsmErrorRate(int) "/>
        <method signature="public void setCdmaDbm(int) "/>
        <method signature="public void setCdmaEcio(int) "/>
        <method signature="public void setEvdoDbm(int) "/>
        <method signature="public void setEvdoEcio(int) "/>
        <method signature="public void setEvdoSnr(int) "/>
        <method signature="public void setLteSignalStrength(int) "/>
        <method signature="public void setLteRsrp(int) "/>
        <method signature="public void setLteRsrq(int) "/>
        <method signature="public void setLteRssnr(int) "/>
        <method signature="public void setLteCqi(int) "/>
    </class>
    <class name="android.database.AbstractCursor">
        <method signature="protected void onDeactivateOrClose() "/>
        <method signature="public void setNotificationUri(android.content.ContentResolver, android.net.Uri, int) "/>
        <method signature="public void setExtras(android.os.Bundle) "/>
    </class>
    <class name="android.nfc.Tag">
        <method signature="public static android.nfc.Tag createMockTag(byte[], int[], android.os.Bundle[]) "/>
        <method signature="public int getServiceHandle() "/>
        <method signature="public android.nfc.Tag rediscover() throws java.io.IOException"/>
        <method signature="public boolean hasTech(int) "/>
        <method signature="public android.os.Bundle getTechExtras(int) "/>
        <method signature="public INfcTag getTagService() "/>
        <method signature="public synchronized void setConnectedTechnology(int) "/>
        <method signature="public int getConnectedTechnology() "/>
        <method signature="public void setTechnologyDisconnected() "/>
    </class>
    <class name="android.provider.BrowserContract.Bookmarks">
        <method signature="public static final android.net.Uri buildFolderUri(long) "/>
    </class>
    <class name="android.widget.AdapterViewAnimator">
        <method signature="public void setRemoteViewsOnClickHandler(android.widget.RemoteViews.OnClickHandler) "/>
    </class>
    <class name="android.widget.VideoView">
        <method signature="public void setVideoURI(android.net.Uri, Map&lt;java.lang.String,java.lang.String&gt;) "/>
        <method signature="public void setSubtitleWidget(android.media.SubtitleTrack.RenderingWidget) "/>
        <method signature="public android.os.Looper getSubtitleLooper() "/>
    </class>
    <class name="android.widget.ListPopupWindow">
        <method signature="public void setForceIgnoreOutsideTouch(boolean) "/>
        <method signature="public void setDropDownAlwaysVisible(boolean) "/>
        <method signature="public boolean isDropDownAlwaysVisible() "/>
    </class>
    <class name="android.telephony.CellInfoLte">
        <method signature="public void setCellIdentity(android.telephony.CellIdentityLte) "/>
        <method signature="public void setCellSignalStrength(android.telephony.CellSignalStrengthLte) "/>
        <method signature="protected static android.telephony.CellInfoLte createFromParcelBody(android.os.Parcel) "/>
    </class>
    <class name="android.app.backup.FullBackupDataOutput">
        <method signature="public android.app.backup.BackupDataOutput getData() "/>
    </class>
    <class name="java.lang.System">
        <method signature="public static void logE(java.lang.String) "/>
        <method signature="public static void logE(java.lang.String, java.lang.Throwable) "/>
        <method signature="public static void logI(java.lang.String) "/>
        <method signature="public static void logI(java.lang.String, java.lang.Throwable) "/>
        <method signature="public static void logW(java.lang.String) "/>
        <method signature="public static void logW(java.lang.String, java.lang.Throwable) "/>
    </class>
    <class name="android.os.Binder">
        <method signature="public static final native void setThreadStrictModePolicy(int) "/>
        <method signature="public static final native int getThreadStrictModePolicy() "/>
        <method signature="public static final boolean isProxy(android.os.IInterface) "/>
        <method signature="public static void setDumpDisabled(java.lang.String) "/>
    </class>
    <class name="android.speech.tts.TextToSpeech">
        <method signature="public java.lang.String getCurrentEngine() "/>
    </class>
    <class name="android.support.v7.widget.PopupMenu">
        <method signature="public boolean onMenuItemSelected(android.support.v7.internal.view.menu.MenuBuilder, android.view.MenuItem) "/>
        <method signature="public void onCloseMenu(android.support.v7.internal.view.menu.MenuBuilder, boolean) "/>
        <method signature="public boolean onOpenSubMenu(android.support.v7.internal.view.menu.MenuBuilder) "/>
        <method signature="public void onCloseSubMenu(android.support.v7.internal.view.menu.SubMenuBuilder) "/>
        <method signature="public void onMenuModeChange(android.support.v7.internal.view.menu.MenuBuilder) "/>
    </class>
    <class name="android.net.Proxy">
        <method signature="public static final java.net.Proxy getProxy(android.content.Context, java.lang.String) "/>
        <method signature="public static final HttpHost getPreferredHttpHost(android.content.Context, java.lang.String) "/>
        <method signature="public static void validate(java.lang.String, java.lang.String, java.lang.String) "/>
        <method signature="public static final HttpRoutePlanner getAndroidProxySelectorRoutePlanner(android.content.Context) "/>
        <method signature="public static final void setHttpProxySystemProperty(android.net.ProxyProperties) "/>
        <method signature="public static final void setHttpProxySystemProperty(java.lang.String, java.lang.String, java.lang.String, java.lang.String) "/>
    </class>
    <class name="android.support.v7.app.ActionBarActivity">
        <method signature="protected boolean onPrepareOptionsPanel(android.view.View, android.view.Menu) "/>
    </class>
    <class name="android.os.Parcel">
        <method signature="public final boolean pushAllowFds(boolean) "/>
        <method signature="public final void restoreAllowFds(boolean) "/>
        <method signature="public final void writeCharSequence(java.lang.CharSequence) "/>
        <method signature="public final void writeCharSequenceArray(java.lang.CharSequence[]) "/>
        <method signature="public final void writeParcelableCreator(android.os.Parcelable) "/>
        <method signature="public final int readExceptionCode() "/>
        <method signature="public final java.lang.CharSequence readCharSequence() "/>
        <method signature="public final java.io.FileDescriptor readRawFileDescriptor() "/>
        <method signature="public final java.lang.String[] readStringArray() "/>
        <method signature="public final java.lang.CharSequence[] readCharSequenceArray() "/>
        <method signature="public final T[] readTypedArray(Creator&lt;T&gt;) "/>
        <method signature="public final T readCreator(Creator&lt;T&gt;, java.lang.ClassLoader) "/>
        <method signature="public final Creator&lt;T&gt; readParcelableCreator(java.lang.ClassLoader) "/>
    </class>
    <class name="android.media.audiofx.AudioEffect">
        <method signature="public static android.media.audiofx.AudioEffect.Descriptor[] queryPreProcessings(int) "/>
        <method signature="public static boolean isEffectTypeAvailable(java.util.UUID) "/>
        <method signature="public int setParameter(byte[], byte[]) throws java.lang.IllegalStateException"/>
        <method signature="public int setParameter(int, int) throws java.lang.IllegalStateException"/>
        <method signature="public int setParameter(int, short) throws java.lang.IllegalStateException"/>
        <method signature="public int setParameter(int, byte[]) throws java.lang.IllegalStateException"/>
        <method signature="public int setParameter(int[], int[]) throws java.lang.IllegalStateException"/>
        <method signature="public int setParameter(int[], short[]) throws java.lang.IllegalStateException"/>
        <method signature="public int setParameter(int[], byte[]) throws java.lang.IllegalStateException"/>
        <method signature="public int getParameter(byte[], byte[]) throws java.lang.IllegalStateException"/>
        <method signature="public int getParameter(int, byte[]) throws java.lang.IllegalStateException"/>
        <method signature="public int getParameter(int, int[]) throws java.lang.IllegalStateException"/>
        <method signature="public int getParameter(int, short[]) throws java.lang.IllegalStateException"/>
        <method signature="public int getParameter(int[], int[]) throws java.lang.IllegalStateException"/>
        <method signature="public int getParameter(int[], short[]) throws java.lang.IllegalStateException"/>
        <method signature="public int getParameter(int[], byte[]) throws java.lang.IllegalStateException"/>
        <method signature="public int command(int, byte[], byte[]) throws java.lang.IllegalStateException"/>
        <method signature="public void setParameterListener(android.media.audiofx.AudioEffect.OnParameterChangeListener) "/>
        <method signature="public void checkState(java.lang.String) throws java.lang.IllegalStateException"/>
        <method signature="public void checkStatus(int) "/>
        <method signature="public static boolean isError(int) "/>
        <method signature="public int byteArrayToInt(byte[]) "/>
        <method signature="public int byteArrayToInt(byte[], int) "/>
        <method signature="public byte[] intToByteArray(int) "/>
        <method signature="public short byteArrayToShort(byte[]) "/>
        <method signature="public short byteArrayToShort(byte[], int) "/>
        <method signature="public byte[] shortToByteArray(short) "/>
        <method signature="public transient byte[] concatArrays(byte[][]) "/>
    </class>
    <class name="android.hardware.camera2.Rational">
        <method signature="public float toFloat() "/>
        <method signature="public int gcd() "/>
    </class>
    <class name="java.nio.charset.Charset">
        <method signature="public static java.nio.charset.Charset forNameUEE(java.lang.String) throws java.io.UnsupportedEncodingException"/>
    </class>
    <class name="android.support.v4.content.ModernAsyncTask">
        <method signature="public static void init() "/>
        <method signature="public static void setDefaultExecutor(java.util.concurrent.Executor) "/>
    </class>
    <class name="android.provider.ContactsContract.QuickContact">
        <method signature="public static android.content.Intent composeQuickContactsIntent(android.content.Context, android.view.View, android.net.Uri, int, java.lang.String[]) "/>
        <method signature="public static android.content.Intent composeQuickContactsIntent(android.content.Context, android.graphics.Rect, android.net.Uri, int, java.lang.String[]) "/>
    </class>
    <class name="android.text.method.MetaKeyKeyListener">
        <method signature="public static void startSelecting(android.view.View, android.text.Spannable) "/>
        <method signature="public static void stopSelecting(android.view.View, android.text.Spannable) "/>
    </class>
    <class name="android.view.animation.Animation">
        <method signature="public void detach() "/>
        <method signature="public void setListenerHandler(android.os.Handler) "/>
        <method signature="public void getInvalidateRegion(int, int, int, int, android.graphics.RectF, android.view.animation.Transformation) "/>
        <method signature="public void initializeInvalidateRegion(int, int, int, int) "/>
        <method signature="public boolean hasAlpha() "/>
    </class>
    <class name="android.app.Dialog">
        <method signature="public boolean takeCancelAndDismissListeners(java.lang.String, android.content.DialogInterface.OnCancelListener, android.content.DialogInterface.OnDismissListener) "/>
    </class>
    <class name="android.os.Debug.MemoryInfo">
        <method signature="public int getTotalUss() "/>
        <method signature="public int getTotalSwappedOut() "/>
        <method signature="public int getOtherPss(int) "/>
        <method signature="public int getOtherSwappablePss(int) "/>
        <method signature="public int getOtherPrivateDirty(int) "/>
        <method signature="public int getOtherSharedDirty(int) "/>
        <method signature="public int getOtherPrivateClean(int) "/>
        <method signature="public int getOtherSharedClean(int) "/>
        <method signature="public int getOtherSwappedOut(int) "/>
        <method signature="public static java.lang.String getOtherLabel(int) "/>
    </class>
    <class name="android.widget.MediaController">
        <method signature="protected android.view.View makeControllerView() "/>
    </class>
    <class name="android.widget.Filter">
        <method signature="public void setDelayer(android.widget.Filter.Delayer) "/>
    </class>
    <class name="android.view.accessibility.AccessibilityNodeInfo">
        <method signature="public static int getAccessibilityViewId(long) "/>
        <method signature="public static int getVirtualDescendantId(long) "/>
        <method signature="public static long makeNodeId(int, int) "/>
        <method signature="public boolean refresh(boolean) "/>
        <method signature="public android.util.SparseLongArray getChildNodeIds() "/>
        <method signature="public long getParentNodeId() "/>
        <method signature="public void setConnectionId(int) "/>
        <method signature="public long getSourceNodeId() "/>
        <method signature="public void setSealed(boolean) "/>
        <method signature="public boolean isSealed() "/>
        <method signature="protected void enforceSealed() "/>
        <method signature="protected void enforceNotSealed() "/>
    </class>
    <class name="android.text.BoringLayout">
        <method signature="public static android.text.BoringLayout.Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic) "/>
        <method signature="public static android.text.BoringLayout.Metrics isBoring(java.lang.CharSequence, android.text.TextPaint, android.text.TextDirectionHeuristic, android.text.BoringLayout.Metrics) "/>
    </class>
    <class name="android.media.SubtitleController.Listener">
        <method signature="public abstract void onSubtitleTrackSelected(android.media.SubtitleTrack) "/>
    </class>
    <class name="android.text.style.EasyEditSpan">
        <method signature="public boolean isDeleteEnabled() "/>
        <method signature="public void setDeleteEnabled(boolean) "/>
        <method signature="public android.app.PendingIntent getPendingIntent() "/>
    </class>
    <class name="android.widget.RelativeLayout.LayoutParams">
        <method signature="public int[] getRules(int) "/>
    </class>
    <class name="android.view.View.AccessibilityDelegate">
        <method signature="public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(android.view.View) "/>
    </class>
    <class name="android.media.MediaExtractor">
        <method signature="public final native void setDataSource(android.media.DataSource) throws java.io.IOException"/>
    </class>
    <class name="android.graphics.RadialGradient">
        <method signature="protected android.graphics.Shader copy() "/>
    </class>
    <class name="android.text.style.SuggestionSpan">
        <method signature="public java.lang.String getNotificationTargetClassName() "/>
        <method signature="public int getUnderlineColor() "/>
        <method signature="public void notifySelection(android.content.Context, java.lang.String, int) "/>
    </class>
    <class name="android.view.GLES20Canvas">
        <method signature="public static int getStencilSize() "/>
    </class>
    <class name="android.util.TimeUtils">
        <method signature="public static ArrayList&lt;java.util.TimeZone&gt; getTimeZonesWithUniqueOffsets(java.lang.String) "/>
        <method signature="public static ArrayList&lt;java.util.TimeZone&gt; getTimeZones(java.lang.String) "/>
        <method signature="public static void formatDuration(long, java.lang.StringBuilder) "/>
        <method signature="public static void formatDuration(long, java.io.PrintWriter, int) "/>
        <method signature="public static void formatDuration(long, java.io.PrintWriter) "/>
        <method signature="public static void formatDuration(long, long, java.io.PrintWriter) "/>
        <method signature="public static java.lang.String formatUptime(long) "/>
        <method signature="public static java.lang.String logTimeOfDay(long) "/>
    </class>
    <class name="android.app.ApplicationPackageManager">
        <method signature="public List&lt;android.content.pm.PackageInfo&gt; getInstalledPackages(int, int) "/>
        <method signature="public List&lt;android.content.pm.ResolveInfo&gt; queryIntentActivitiesAsUser(android.content.Intent, int, int) "/>
        <method signature="public List&lt;android.content.pm.ResolveInfo&gt; queryBroadcastReceivers(android.content.Intent, int, int) "/>
        <method signature="public android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String, int) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() "/>
    </class>
    <class name="java.util.Arrays">
        <method signature="public static void checkOffsetAndCount(int, int, int) "/>
        <method signature="public static void checkStartAndEnd(int, int, int) "/>
    </class>
    <class name="android.inputmethodservice.ExtractEditText">
        <method signature="protected void viewClicked(android.view.inputmethod.InputMethodManager) "/>
        <method signature="protected void deleteText_internal(int, int) "/>
        <method signature="protected void replaceText_internal(int, int, java.lang.CharSequence) "/>
        <method signature="protected void setSpan_internal(java.lang.Object, int, int, int) "/>
        <method signature="protected void setCursorPosition_internal(int, int) "/>
    </class>
    <class name="android.view.animation.AlphaAnimation">
        <method signature="public boolean hasAlpha() "/>
    </class>
    <class name="com.android.test.runner.AndroidJUnitRunner">
        <method signature="public android.os.Bundle getArguments() "/>
    </class>
    <class name="android.graphics.Rect">
        <method signature="public java.lang.String toShortString(java.lang.StringBuilder) "/>
        <method signature="public void printShortString(java.io.PrintWriter) "/>
        <method signature="public void scale(float) "/>
    </class>
    <class name="android.media.ImageReader">
        <method signature="public android.media.Image acquireNextImageNoThrowISE() "/>
    </class>
    <class name="android.view.DisplayList">
        <method signature="public abstract void reset() "/>
        <method signature="public void markDirty() "/>
        <method signature="protected void clearDirty() "/>
        <method signature="public boolean isDirty() "/>
        <method signature="public abstract int getSize() "/>
        <method signature="public abstract void setCaching(boolean) "/>
        <method signature="public abstract void setAnimationMatrix(android.graphics.Matrix) "/>
        <method signature="public abstract void setTransformationInfo(float, float, float, float, float, float, float, float) "/>
    </class>
    <class name="android.print.PrinterId">
        <method signature="public android.content.ComponentName getServiceName() "/>
    </class>
    <class name="android.util.Log">
        <method signature="public static int wtfStack(java.lang.String, java.lang.String) "/>
        <method signature="public static android.util.Log.TerribleFailureHandler setWtfHandler(android.util.Log.TerribleFailureHandler) "/>
        <method signature="public static native int println_native(int, int, java.lang.String, java.lang.String) "/>
    </class>
    <class name="android.app.ActionBar">
        <method signature="public boolean isTitleTruncated() "/>
    </class>
    <class name="android.app.Notification.Builder">
        <method signature="public android.app.Notification.Builder addKind(java.lang.String) "/>
        <method signature="public android.app.Notification buildUnstyled() "/>
        <method signature="public void addExtras(android.os.Bundle) "/>
        <method signature="public android.app.Notification buildInto(android.app.Notification) "/>
    </class>
    <class name="android.app.AppOpsManager">
        <method signature="public static int opToSwitch(int) "/>
        <method signature="public static java.lang.String opToName(int) "/>
        <method signature="public static java.lang.String opToPermission(int) "/>
        <method signature="public static int opToDefaultMode(int) "/>
        <method signature="public static boolean opAllowsReset(int) "/>
        <method signature="public List&lt;android.app.AppOpsManager.PackageOps&gt; getPackagesForOps(int[]) "/>
        <method signature="public List&lt;android.app.AppOpsManager.PackageOps&gt; getOpsForPackage(int, java.lang.String, int[]) "/>
        <method signature="public void setMode(int, int, java.lang.String, int) "/>
        <method signature="public void resetAllModes() "/>
        <method signature="public void startWatchingMode(int, java.lang.String, android.app.AppOpsManager.OnOpChangedListener) "/>
        <method signature="public int checkOp(int, int, java.lang.String) "/>
        <method signature="public int checkOpNoThrow(int, int, java.lang.String) "/>
        <method signature="public int noteOp(int, int, java.lang.String) "/>
        <method signature="public int noteOpNoThrow(int, int, java.lang.String) "/>
        <method signature="public int noteOp(int) "/>
        <method signature="public static android.os.IBinder getToken(IAppOpsService) "/>
        <method signature="public int startOp(int, int, java.lang.String) "/>
        <method signature="public int startOpNoThrow(int, int, java.lang.String) "/>
        <method signature="public int startOp(int) "/>
        <method signature="public void finishOp(int, int, java.lang.String) "/>
        <method signature="public void finishOp(int) "/>
    </class>
    <class name="android.net.TrafficStats">
        <method signature="public static void setThreadStatsUid(int) "/>
        <method signature="public static void clearThreadStatsUid() "/>
        <method signature="public static void startDataProfiling(android.content.Context) "/>
        <method signature="public static android.net.NetworkStats stopDataProfiling(android.content.Context) "/>
        <method signature="public static void closeQuietly(INetworkStatsSession) "/>
        <method signature="public static long getMobileTcpRxPackets() "/>
        <method signature="public static long getMobileTcpTxPackets() "/>
        <method signature="public static long getTxPackets(java.lang.String) "/>
        <method signature="public static long getRxPackets(java.lang.String) "/>
        <method signature="public static long getTxBytes(java.lang.String) "/>
        <method signature="public static long getRxBytes(java.lang.String) "/>
    </class>
    <class name="android.view.ViewDebug">
        <method signature="public static long getViewInstanceCount() "/>
        <method signature="public static long getViewRootImplCount() "/>
        <method signature="public static android.view.View findView(android.view.View, java.lang.String) "/>
        <method signature="public static void profileViewAndChildren(android.view.View, java.io.BufferedWriter) throws java.io.IOException"/>
        <method signature="public static void captureLayers(android.view.View, java.io.DataOutputStream) throws java.io.IOException"/>
        <method signature="public static void outputDisplayList(android.view.View, android.view.View) "/>
        <method signature="public static void capture(android.view.View, java.io.OutputStream, android.view.View) throws java.io.IOException"/>
        <method signature="public static void dump(android.view.View, boolean, boolean, java.io.OutputStream) throws java.io.IOException"/>
        <method signature="public static java.lang.Object invokeViewMethod(android.view.View, java.lang.reflect.Method, java.lang.Object[]) "/>
        <method signature="public static void setLayoutParameter(android.view.View, java.lang.String, int) throws java.lang.NoSuchFieldException, java.lang.IllegalAccessException"/>
    </class>
    <class name="android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo">
        <method signature="public static android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo obtain(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo) "/>
    </class>
    <class name="android.media.MediaPlayer.TimeProvider">
        <method signature="public void close() "/>
        <method signature="protected void finalize() "/>
        <method signature="public void onPaused(boolean) "/>
        <method signature="public void onStopped() "/>
        <method signature="public void onSeekComplete(android.media.MediaPlayer) "/>
        <method signature="public void onNewPlayer() "/>
    </class>
    <class name="android.support.v4.view.ActionProvider">
        <method signature="public void subUiVisibilityChanged(boolean) "/>
        <method signature="public void setSubUiVisibilityListener(android.support.v4.view.ActionProvider.SubUiVisibilityListener) "/>
    </class>
    <class name="android.media.MediaRouter">
        <method signature="public android.media.MediaRouter.RouteCategory getSystemCategory() "/>
        <method signature="public android.media.MediaRouter.RouteInfo getSelectedRoute() "/>
        <method signature="public boolean isRouteAvailable(int, int) "/>
        <method signature="public void selectRouteInt(int, android.media.MediaRouter.RouteInfo, boolean) "/>
        <method signature="public void addRouteInt(android.media.MediaRouter.RouteInfo) "/>
        <method signature="public void removeRouteInt(android.media.MediaRouter.RouteInfo) "/>
        <method signature="public void rebindAsUser(int) "/>
    </class>
    <class name="android.view.animation.Transformation">
        <method signature="public void postCompose(android.view.animation.Transformation) "/>
        <method signature="public void toShortString(java.lang.StringBuilder) "/>
        <method signature="public void printShortString(java.io.PrintWriter) "/>
    </class>
    <class name="android.graphics.Bitmap">
        <method signature="public static void setDefaultDensity(int) "/>
        <method signature="public void setNinePatchChunk(byte[]) "/>
        <method signature="public void setLayoutBounds(int[]) "/>
        <method signature="public int[] getLayoutBounds() "/>
        <method signature="public static int scaleFromDensity(int, int, int) "/>
    </class>
    <class name="android.view.accessibility.AccessibilityEvent">
        <method signature="public void setSealed(boolean) "/>
        <method signature="protected void clear() "/>
    </class>
    <class name="android.app.admin.DevicePolicyManager">
        <method signature="public static android.app.admin.DevicePolicyManager create(android.content.Context, android.os.Handler) "/>
        <method signature="public boolean packageHasActiveAdmins(java.lang.String) "/>
        <method signature="public int getPasswordQuality(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordMinimumLength(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordMinimumUpperCase(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordMinimumLowerCase(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordMinimumLetters(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordMinimumNumeric(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordMinimumSymbols(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordMinimumNonLetter(android.content.ComponentName, int) "/>
        <method signature="public int getPasswordHistoryLength(android.content.ComponentName, int) "/>
        <method signature="public int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int) "/>
        <method signature="public long getMaximumTimeToLock(android.content.ComponentName, int) "/>
        <method signature="public android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.net.Proxy, List&lt;java.lang.String&gt;) "/>
        <method signature="public android.content.ComponentName getGlobalProxyAdmin() "/>
        <method signature="public int getStorageEncryptionStatus(int) "/>
        <method signature="public boolean installCaCert(byte[]) "/>
        <method signature="public void uninstallCaCert(byte[]) "/>
        <method signature="public static boolean hasAnyCaCertsInstalled() "/>
        <method signature="public boolean hasCaCertInstalled(byte[]) "/>
        <method signature="public boolean getCameraDisabled(android.content.ComponentName, int) "/>
        <method signature="public int getKeyguardDisabledFeatures(android.content.ComponentName, int) "/>
        <method signature="public void setActiveAdmin(android.content.ComponentName, boolean) "/>
        <method signature="public android.app.admin.DeviceAdminInfo getAdminInfo(android.content.ComponentName) "/>
        <method signature="public void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback) "/>
        <method signature="public void setActivePasswordState(int, int, int, int, int, int, int, int, int) "/>
        <method signature="public void reportFailedPasswordAttempt(int) "/>
        <method signature="public void reportSuccessfulPasswordAttempt(int) "/>
        <method signature="public boolean setDeviceOwner(java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException"/>
        <method signature="public boolean setDeviceOwner(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException"/>
        <method signature="public boolean isDeviceOwner(java.lang.String) "/>
        <method signature="public java.lang.String getDeviceOwner() "/>
        <method signature="public java.lang.String getDeviceOwnerName() "/>
    </class>
    <class name="android.telephony.ServiceState">
        <method signature="public static android.telephony.ServiceState newFromBundle(android.os.Bundle) "/>
        <method signature="public int getVoiceRegState() "/>
        <method signature="public int getDataRegState() "/>
        <method signature="public boolean isEmergencyOnly() "/>
        <method signature="public int getCdmaRoamingIndicator() "/>
        <method signature="public int getCdmaDefaultRoamingIndicator() "/>
        <method signature="public int getCdmaEriIconIndex() "/>
        <method signature="public int getCdmaEriIconMode() "/>
        <method signature="public static java.lang.String rilRadioTechnologyToString(int) "/>
        <method signature="public void setVoiceRegState(int) "/>
        <method signature="public void setDataRegState(int) "/>
        <method signature="public void setEmergencyOnly(boolean) "/>
        <method signature="public void setCdmaRoamingIndicator(int) "/>
        <method signature="public void setCdmaDefaultRoamingIndicator(int) "/>
        <method signature="public void setCdmaEriIconIndex(int) "/>
        <method signature="public void setCdmaEriIconMode(int) "/>
        <method signature="public void setOperatorAlphaLong(java.lang.String) "/>
        <method signature="public void fillInNotifierBundle(android.os.Bundle) "/>
        <method signature="public void setRilVoiceRadioTechnology(int) "/>
        <method signature="public void setRilDataRadioTechnology(int) "/>
        <method signature="public void setCssIndicator(int) "/>
        <method signature="public void setSystemAndNetworkId(int, int) "/>
        <method signature="public int getRilVoiceRadioTechnology() "/>
        <method signature="public int getRilDataRadioTechnology() "/>
        <method signature="public int getRadioTechnology() "/>
        <method signature="public int getNetworkType() "/>
        <method signature="public int getDataNetworkType() "/>
        <method signature="public int getVoiceNetworkType() "/>
        <method signature="public int getCssIndicator() "/>
        <method signature="public int getNetworkId() "/>
        <method signature="public int getSystemId() "/>
        <method signature="public static boolean isGsm(int) "/>
        <method signature="public static boolean isCdma(int) "/>
    </class>
    <class name="android.text.SpannableStringBuilder">
        <method signature="public java.lang.String substring(int, int) "/>
        <method signature="public void drawText(android.graphics.Canvas, int, int, float, float, android.graphics.Paint) "/>
        <method signature="public void drawTextRun(android.graphics.Canvas, int, int, int, int, float, float, int, android.graphics.Paint) "/>
        <method signature="public float measureText(int, int, android.graphics.Paint) "/>
        <method signature="public int getTextWidths(int, int, float[], android.graphics.Paint) "/>
        <method signature="public float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint) "/>
    </class>
    <class name="android.net.DhcpInfo">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.os.UserManager">
        <method signature="public static synchronized android.os.UserManager get(android.content.Context) "/>
        <method signature="public static boolean supportsMultipleUsers() "/>
        <method signature="public int getUserHandle() "/>
        <method signature="public boolean isLinkedUser() "/>
        <method signature="public android.content.pm.UserInfo getUserInfo(int) "/>
        <method signature="public void setUserRestriction(java.lang.String, boolean, android.os.UserHandle) "/>
        <method signature="public boolean hasUserRestriction(java.lang.String) "/>
        <method signature="public boolean hasUserRestriction(java.lang.String, android.os.UserHandle) "/>
        <method signature="public android.content.pm.UserInfo createUser(java.lang.String, int) "/>
        <method signature="public List&lt;android.content.pm.UserInfo&gt; getUsers() "/>
        <method signature="public List&lt;android.content.pm.UserInfo&gt; getUsers(boolean) "/>
        <method signature="public boolean removeUser(int) "/>
        <method signature="public void setUserName(int, java.lang.String) "/>
        <method signature="public void setUserIcon(int, android.graphics.Bitmap) "/>
        <method signature="public android.graphics.Bitmap getUserIcon(int) "/>
        <method signature="public void setGuestEnabled(boolean) "/>
        <method signature="public boolean isGuestEnabled() "/>
        <method signature="public void wipeUser(int) "/>
        <method signature="public static int getMaxSupportedUsers() "/>
        <method signature="public int getUserSerialNumber(int) "/>
        <method signature="public int getUserHandle(int) "/>
        <method signature="public android.os.Bundle getApplicationRestrictions(java.lang.String, android.os.UserHandle) "/>
        <method signature="public void setApplicationRestrictions(java.lang.String, android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public int checkRestrictionsChallenge(java.lang.String) "/>
        <method signature="public boolean hasRestrictionsChallenge() "/>
        <method signature="public void removeRestrictions() "/>
    </class>
    <class name="android.gesture.OrientedBoundingBox">
        <method signature="public android.graphics.Path toPath() "/>
    </class>
    <class name="android.widget.Spinner">
        <method signature="public void setOnItemClickListenerInt(OnItemClickListener) "/>
    </class>
    <class name="android.app.ContextImpl">
        <method signature="public java.lang.String getBasePackageName() "/>
        <method signature="public java.lang.String getOpPackageName() "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public void startActivitiesAsUser(android.content.Intent[], android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle) "/>
        <method signature="public int getUserId() "/>
    </class>
    <class name="com.android.internal.widget.ActionBarContainer">
        <method signature="public void onResolveDrawables(int) "/>
    </class>
    <class name="android.view.ViewGroup.LayoutParams">
        <method signature="public java.lang.String debug(java.lang.String) "/>
        <method signature="public void onDebugDraw(android.view.View, android.graphics.Canvas, android.graphics.Paint) "/>
        <method signature="protected static java.lang.String sizeToString(int) "/>
    </class>
    <class name="android.app.backup.BackupManager">
        <method signature="public android.app.backup.RestoreSession beginRestoreSession() "/>
    </class>
    <class name="android.media.ThumbnailUtils">
        <method signature="public static android.graphics.Bitmap createImageThumbnail(java.lang.String, int) "/>
    </class>
    <class name="android.telephony.CellSignalStrengthGsm">
        <method signature="public void initialize(int, int) "/>
        <method signature="protected void copyFrom(android.telephony.CellSignalStrengthGsm) "/>
        <method signature="public android.telephony.CellSignalStrengthGsm copy() "/>
        <method signature="public void setDefaultValues() "/>
    </class>
    <class name="android.content.pm.PackageParser">
        <method signature="public static void setCompatibilityModeEnabled(boolean) "/>
    </class>
    <class name="android.hardware.SystemSensorManager">
        <method signature="protected List&lt;android.hardware.Sensor&gt; getFullSensorList() "/>
        <method signature="protected boolean registerListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor, int, android.os.Handler, int, int) "/>
        <method signature="protected void unregisterListenerImpl(android.hardware.SensorEventListener, android.hardware.Sensor) "/>
        <method signature="protected boolean requestTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor) "/>
        <method signature="protected boolean cancelTriggerSensorImpl(android.hardware.TriggerEventListener, android.hardware.Sensor, boolean) "/>
    </class>
    <class name="android.app.backup.RestoreObserver">
        <method signature="public void restoreSetsAvailable(android.app.backup.RestoreSet[]) "/>
    </class>
    <class name="android.nfc.tech.MifareClassic">
        <method signature="public boolean isEmulated() "/>
    </class>
    <class name="android.app.Notification.BigPictureStyle">
        <method signature="public void addExtras(android.os.Bundle) "/>
        <method signature="public android.app.Notification buildStyled(android.app.Notification) "/>
    </class>
    <class name="android.bluetooth.BluetoothAdapter">
        <method signature="public boolean disable(boolean) "/>
        <method signature="public boolean configHciSnoopLog(boolean) "/>
        <method signature="public android.os.ParcelUuid[] getUuids() "/>
        <method signature="public boolean setScanMode(int, int) "/>
        <method signature="public boolean setScanMode(int) "/>
        <method signature="public int getDiscoverableTimeout() "/>
        <method signature="public void setDiscoverableTimeout(int) "/>
        <method signature="public int getConnectionState() "/>
        <method signature="public android.bluetooth.BluetoothServerSocket listenUsingRfcommOn(int) throws java.io.IOException"/>
        <method signature="public android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(java.lang.String, java.util.UUID) throws java.io.IOException"/>
        <method signature="public android.bluetooth.BluetoothServerSocket listenUsingInsecureRfcommOn(int) throws java.io.IOException"/>
        <method signature="public android.bluetooth.BluetoothServerSocket listenUsingEncryptedRfcommOn(int) throws java.io.IOException"/>
        <method signature="public static android.bluetooth.BluetoothServerSocket listenUsingScoOn() throws java.io.IOException"/>
        <method signature="public Pair&lt;byte[],byte[]&gt; readOutOfBandData() "/>
        <method signature="public boolean enableNoAutoConnect() "/>
        <method signature="public boolean changeApplicationBluetoothState(boolean, android.bluetooth.BluetoothAdapter.BluetoothStateChangeCallback) "/>
    </class>
    <class name="android.webkit.UrlInterceptRegistry">
        <method signature="public static synchronized void setUrlInterceptDisabled(boolean) "/>
        <method signature="public static synchronized boolean urlInterceptDisabled() "/>
        <method signature="public static synchronized boolean registerHandler(android.webkit.UrlInterceptHandler) "/>
        <method signature="public static synchronized boolean unregisterHandler(android.webkit.UrlInterceptHandler) "/>
        <method signature="public static synchronized android.webkit.CacheManager.CacheResult getSurrogate(java.lang.String, Map&lt;java.lang.String,java.lang.String&gt;) "/>
        <method signature="public static synchronized android.webkit.PluginData getPluginData(java.lang.String, Map&lt;java.lang.String,java.lang.String&gt;) "/>
    </class>
    <class name="android.os.PowerManager">
        <method signature="public int getMinimumScreenBrightnessSetting() "/>
        <method signature="public int getMaximumScreenBrightnessSetting() "/>
        <method signature="public int getDefaultScreenBrightnessSetting() "/>
        <method signature="public static boolean useScreenAutoBrightnessAdjustmentFeature() "/>
        <method signature="public static boolean useTwilightAdjustmentFeature() "/>
        <method signature="public static void validateWakeLockParameters(int, java.lang.String) "/>
        <method signature="public void nap(long) "/>
        <method signature="public void setBacklightBrightness(int) "/>
        <method signature="public boolean isWakeLockLevelSupported(int) "/>
    </class>
    <class name="java.lang.reflect.AbstractMethod">
        <method signature="public final int getAccessFlags() "/>
        <method signature="public final int getDexMethodIndex() "/>
    </class>
    <class name="android.widget.Scroller">
        <method signature="public boolean isScrollingInDirection(float, float) "/>
    </class>
    <class name="android.net.wifi.WpsResult">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.provider.CallLog.Calls">
        <method signature="public static android.net.Uri addCall(com.android.internal.telephony.CallerInfo, android.content.Context, java.lang.String, int, int, long, int) "/>
    </class>
    <class name="android.view.ViewTreeObserver">
        <method signature="public void addOnComputeInternalInsetsListener(android.view.ViewTreeObserver.OnComputeInternalInsetsListener) "/>
        <method signature="public void removeOnComputeInternalInsetsListener(android.view.ViewTreeObserver.OnComputeInternalInsetsListener) "/>
    </class>
    <class name="android.view.ViewGroup.MarginLayoutParams">
        <method signature="public void setMarginsRelative(int, int, int, int) "/>
        <method signature="public boolean isLayoutRtl() "/>
        <method signature="public void onDebugDraw(android.view.View, android.graphics.Canvas, android.graphics.Paint) "/>
    </class>
    <class name="android.security.KeyChain">
        <method signature="public static android.security.KeyChain.KeyChainConnection bind(android.content.Context) throws java.lang.InterruptedException"/>
    </class>
    <class name="android.bluetooth.BluetoothA2dp">
        <method signature="public boolean connect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean disconnect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean setPriority(android.bluetooth.BluetoothDevice, int) "/>
        <method signature="public int getPriority(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean isAvrcpAbsoluteVolumeSupported() "/>
        <method signature="public void adjustAvrcpAbsoluteVolume(int) "/>
        <method signature="public void setAvrcpAbsoluteVolume(int) "/>
        <method signature="public boolean shouldSendVolumeKeys(android.bluetooth.BluetoothDevice) "/>
        <method signature="public static java.lang.String stateToString(int) "/>
    </class>
    <class name="android.test.mock.MockContext">
        <method signature="public java.lang.String getBasePackageName() "/>
        <method signature="public java.lang.String getOpPackageName() "/>
        <method signature="public java.io.File getSharedPrefsFile(java.lang.String) "/>
        <method signature="public void sendBroadcast(android.content.Intent, java.lang.String, int) "/>
        <method signature="public void sendOrderedBroadcast(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) "/>
        <method signature="public android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler) "/>
        <method signature="public android.content.ComponentName startServiceAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public boolean stopServiceAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle) "/>
        <method signature="public android.content.Context createPackageContextAsUser(java.lang.String, int, android.os.UserHandle) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public int getUserId() "/>
        <method signature="public android.view.DisplayAdjustments getDisplayAdjustments(int) "/>
    </class>
    <class name="android.support.v7.internal.widget.ActivityChooserView">
        <method signature="public void setProvider(android.support.v4.view.ActionProvider) "/>
    </class>
    <class name="android.graphics.drawable.LayerDrawable">
        <method signature="public void setLayoutDirection(int) "/>
    </class>
    <class name="android.app.TaskStackBuilder">
        <method signature="public void startActivities(android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public android.app.PendingIntent getPendingIntent(int, int, android.os.Bundle, android.os.UserHandle) "/>
    </class>
    <class name="com.android.internal.widget.SizeAdaptiveLayout">
        <method signature="public android.animation.Animator getTransitionAnimation() "/>
        <method signature="public android.view.View getModestyPanel() "/>
    </class>
    <class name="android.content.ClipDescription">
        <method signature="public void validate() "/>
        <method signature="public boolean toShortString(java.lang.StringBuilder) "/>
    </class>
    <class name="java.net.Socket">
        <method signature="public java.io.FileDescriptor getFileDescriptor$() "/>
    </class>
    <class name="com.android.internal.os.BinderInternal">
        <method signature="public static final native void disableBackgroundScheduling(boolean) "/>
    </class>
    <class name="android.app.Notification.InboxStyle">
        <method signature="public void addExtras(android.os.Bundle) "/>
        <method signature="public android.app.Notification buildStyled(android.app.Notification) "/>
    </class>
    <class name="android.graphics.ComposeShader">
        <method signature="protected android.graphics.Shader copy() "/>
    </class>
    <class name="android.app.Notification">
        <method signature="public void cloneInto(android.app.Notification, boolean) "/>
        <method signature="public final void lightenPayload() "/>
        <method signature="public static java.lang.CharSequence safeCharSequence(java.lang.CharSequence) "/>
        <method signature="public void setUser(android.os.UserHandle) "/>
    </class>
    <class name="android.telephony.CellSignalStrengthCdma">
        <method signature="public void initialize(int, int, int, int, int) "/>
        <method signature="protected void copyFrom(android.telephony.CellSignalStrengthCdma) "/>
        <method signature="public android.telephony.CellSignalStrengthCdma copy() "/>
        <method signature="public void setDefaultValues() "/>
        <method signature="public void setCdmaDbm(int) "/>
        <method signature="public void setCdmaEcio(int) "/>
        <method signature="public void setEvdoDbm(int) "/>
        <method signature="public void setEvdoEcio(int) "/>
        <method signature="public void setEvdoSnr(int) "/>
    </class>
    <class name="java.net.InetAddress">
        <method signature="public static void clearDnsCache() "/>
        <method signature="public static boolean isNumeric(java.lang.String) "/>
        <method signature="public static java.net.InetAddress parseNumericAddress(java.lang.String) "/>
    </class>
    <class name="android.database.DatabaseUtils">
        <method signature="public static int getTypeOfObject(java.lang.Object) "/>
        <method signature="public static void cursorFillWindow(android.database.Cursor, int, android.database.CursorWindow) "/>
        <method signature="public static int cursorPickFillWindowStartPosition(int, int) "/>
        <method signature="public static boolean queryIsEmpty(android.database.sqlite.SQLiteDatabase, java.lang.String) "/>
        <method signature="public static int findRowIdColumnIndex(java.lang.String[]) "/>
    </class>
    <class name="android.view.MotionEvent">
        <method signature="public android.view.MotionEvent copy() "/>
        <method signature="public final void scale(float) "/>
        <method signature="public final boolean isTouchEvent() "/>
        <method signature="public final boolean isTainted() "/>
        <method signature="public final void setTainted(boolean) "/>
        <method signature="public final void setDownTime(long) "/>
        <method signature="public final long getEventTimeNano() "/>
        <method signature="public final long getHistoricalEventTimeNano(int) "/>
        <method signature="public final boolean addBatch(android.view.MotionEvent) "/>
        <method signature="public final boolean isWithinBoundsNoHistory(float, float, float, float) "/>
        <method signature="public final android.view.MotionEvent clampNoHistory(float, float, float, float) "/>
        <method signature="public final int getPointerIdBits() "/>
        <method signature="public final android.view.MotionEvent split(int) "/>
        <method signature="public static java.lang.String buttonStateToString(int) "/>
        <method signature="public static java.lang.String toolTypeToString(int) "/>
        <method signature="public static android.view.MotionEvent createFromParcelBody(android.os.Parcel) "/>
    </class>
    <class name="android.renderscript.AllocationAdapter">
        <method signature="public void subData(int, android.renderscript.FieldPacker) "/>
        <method signature="public void subElementData(int, int, android.renderscript.FieldPacker) "/>
        <method signature="public void subData1D(int, int, int[]) "/>
        <method signature="public void subData1D(int, int, short[]) "/>
        <method signature="public void subData1D(int, int, byte[]) "/>
        <method signature="public void subData1D(int, int, float[]) "/>
        <method signature="public void subData2D(int, int, int, int, int[]) "/>
        <method signature="public void subData2D(int, int, int, int, float[]) "/>
        <method signature="public void readData(int[]) "/>
        <method signature="public void readData(float[]) "/>
    </class>
    <class name="java.util.ServiceLoader">
        <method signature="public static S loadFromSystemProperty(Class&lt;S&gt;) "/>
    </class>
    <class name="android.content.Context">
        <method signature="public int getThemeResId() "/>
        <method signature="public abstract java.lang.String getBasePackageName() "/>
        <method signature="public abstract java.lang.String getOpPackageName() "/>
        <method signature="public abstract java.io.File getSharedPrefsFile(java.lang.String) "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public void startActivitiesAsUser(android.content.Intent[], android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public abstract void sendBroadcast(android.content.Intent, java.lang.String, int) "/>
        <method signature="public abstract void sendOrderedBroadcast(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) "/>
        <method signature="public abstract android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler) "/>
        <method signature="public abstract android.content.ComponentName startServiceAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public abstract boolean stopServiceAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle) "/>
        <method signature="public abstract android.content.Context createPackageContextAsUser(java.lang.String, int, android.os.UserHandle) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public abstract int getUserId() "/>
        <method signature="public abstract android.view.DisplayAdjustments getDisplayAdjustments(int) "/>
    </class>
    <class name="android.graphics.drawable.DrawableContainer">
        <method signature="public android.graphics.Insets getOpticalInsets() "/>
    </class>
    <class name="android.preference.PreferenceManager">
        <method signature="public android.preference.PreferenceScreen inflateFromResource(android.content.Context, int, android.preference.PreferenceScreen) "/>
    </class>
    <class name="android.provider.ContactsContract.CommonDataKinds.Phone">
        <method signature="public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence, java.lang.CharSequence[]) "/>
        <method signature="public static final java.lang.CharSequence getDisplayLabel(android.content.Context, int, java.lang.CharSequence) "/>
    </class>
    <class name="android.nfc.tech.TagTechnology">
        <method signature="public abstract void reconnect() throws java.io.IOException"/>
    </class>
    <class name="android.hardware.Camera.Parameters">
        <method signature="public void dump() "/>
    </class>
    <class name="android.view.InputEvent">
        <method signature="public abstract void setSource(int) "/>
        <method signature="public abstract android.view.InputEvent copy() "/>
        <method signature="public void recycle() "/>
        <method signature="public void recycleIfNeededAfterDispatch() "/>
        <method signature="protected void prepareForReuse() "/>
        <method signature="public abstract boolean isTainted() "/>
        <method signature="public abstract void setTainted(boolean) "/>
        <method signature="public abstract long getEventTimeNano() "/>
        <method signature="public int getSequenceNumber() "/>
    </class>
    <class name="android.media.RemoteController">
        <method signature="public java.lang.String getRemoteControlClientPackageName() "/>
        <method signature="public boolean setArtworkConfiguration(boolean, int, int) throws java.lang.IllegalArgumentException"/>
    </class>
    <class name="android.graphics.Region">
        <method signature="public void scale(float) "/>
        <method signature="public native void scale(float, android.graphics.Region) "/>
        <method signature="public static android.graphics.Region obtain() "/>
        <method signature="public static android.graphics.Region obtain(android.graphics.Region) "/>
        <method signature="public void recycle() "/>
    </class>
    <class name="android.app.AlertDialog.Builder">
        <method signature="public android.app.AlertDialog.Builder setView(android.view.View, int, int, int, int) "/>
        <method signature="public android.app.AlertDialog.Builder setRecycleOnMeasureEnabled(boolean) "/>
    </class>
    <class name="android.app.Activity">
        <method signature="public final android.database.Cursor managedQuery(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String) "/>
        <method signature="public void setPersistent(boolean) "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public void convertFromTranslucent() "/>
        <method signature="public void convertToTranslucent(android.app.Activity.TranslucentConversionListener) "/>
        <method signature="public final android.os.IBinder getActivityToken() "/>
        <method signature="public final boolean isResumed() "/>
    </class>
    <class name="android.widget.ActivityChooserView">
        <method signature="public void setProvider(android.view.ActionProvider) "/>
    </class>
    <class name="android.net.LinkCapabilities">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.media.AudioTrack">
        <method signature="public int getLatency() "/>
        <method signature="public int setVolume(float) "/>
    </class>
    <class name="android.content.SyncRequest">
        <method signature="public boolean isPeriodic() "/>
        <method signature="public boolean isExpedited() "/>
        <method signature="public boolean hasAuthority() "/>
        <method signature="public android.accounts.Account getAccount() "/>
        <method signature="public java.lang.String getProvider() "/>
        <method signature="public android.os.Bundle getBundle() "/>
        <method signature="public long getSyncFlexTime() "/>
        <method signature="public long getSyncRunTime() "/>
    </class>
    <class name="java.net.SocketImpl">
        <method signature="public java.io.FileDescriptor getFD$() "/>
    </class>
    <class name="android.content.res.Configuration">
        <method signature="public static int resetScreenLayout(int) "/>
        <method signature="public static int reduceScreenLayout(int, int, int) "/>
        <method signature="public void makeDefault() "/>
        <method signature="public boolean isOtherSeqNewer(android.content.res.Configuration) "/>
    </class>
    <class name="android.telephony.SmsManager">
        <method signature="public boolean copyMessageToIcc(byte[], byte[], int) "/>
        <method signature="public boolean deleteMessageFromIcc(int) "/>
        <method signature="public boolean updateMessageOnIcc(int, int, byte[]) "/>
        <method signature="public static ArrayList&lt;android.telephony.SmsMessage&gt; getAllMessagesFromIcc() "/>
        <method signature="public boolean enableCellBroadcast(int) "/>
        <method signature="public boolean disableCellBroadcast(int) "/>
        <method signature="public boolean enableCellBroadcastRange(int, int) "/>
        <method signature="public boolean disableCellBroadcastRange(int, int) "/>
    </class>
    <class name="android.view.textservice.SpellCheckerSubtype">
        <method signature="public static java.util.Locale constructLocaleFromString(java.lang.String) "/>
        <method signature="public static List&lt;android.view.textservice.SpellCheckerSubtype&gt; sort(android.content.Context, int, android.view.textservice.SpellCheckerInfo, List&lt;android.view.textservice.SpellCheckerSubtype&gt;) "/>
    </class>
    <class name="android.text.method.ArrowKeyMovementMethod">
        <method signature="protected boolean leftWord(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean rightWord(android.widget.TextView, android.text.Spannable) "/>
    </class>
    <class name="android.inputmethodservice.Keyboard">
        <method signature="public int[] getShiftKeyIndices() "/>
    </class>
    <class name="android.hardware.SerialPort">
        <method signature="public void open(android.os.ParcelFileDescriptor, int) throws java.io.IOException"/>
    </class>
    <class name="android.graphics.Color">
        <method signature="public static float hue(int) "/>
        <method signature="public static float saturation(int) "/>
        <method signature="public static float brightness(int) "/>
        <method signature="public static int HSBtoColor(float[]) "/>
        <method signature="public static int HSBtoColor(float, float, float) "/>
        <method signature="public static int getHtmlColor(java.lang.String) "/>
    </class>
    <class name="android.opengl.GLUtils">
        <method signature="public static native void setTracingLevel(int) "/>
    </class>
    <class name="android.webkit.Plugin.DefaultClickHandler">
        <method signature="public void onClick(android.content.DialogInterface, int) "/>
    </class>
    <class name="android.graphics.Matrix">
        <method signature="public void toShortString(java.lang.StringBuilder) "/>
        <method signature="public void printShortString(java.io.PrintWriter) "/>
    </class>
    <class name="com.android.layoutlib.bridge.android.BridgeContentResolver">
        <method signature="public void unstableProviderDied(android.content.IContentProvider) "/>
    </class>
    <class name="android.content.pm.ActivityInfo">
        <method signature="public static int activityInfoConfigToNative(int) "/>
        <method signature="public int getRealConfigChanged() "/>
    </class>
    <class name="android.webkit.HttpAuthHandler">
        <method signature="public boolean suppressDialog() "/>
    </class>
    <class name="android.widget.ProgressBar">
        <method signature="public void onResolveDrawables(int) "/>
    </class>
    <class name="android.widget.SearchView">
        <method signature="public void setAppSearchData(android.os.Bundle) "/>
        <method signature="public boolean requestFocus(int, android.graphics.Rect) "/>
        <method signature="public void clearFocus() "/>
    </class>
    <class name="android.view.accessibility.AccessibilityNodeInfo.RangeInfo">
        <method signature="public static android.view.accessibility.AccessibilityNodeInfo.RangeInfo obtain(android.view.accessibility.AccessibilityNodeInfo.RangeInfo) "/>
    </class>
    <class name="android.media.Ringtone">
        <method signature="public void setUri(android.net.Uri) "/>
        <method signature="public android.net.Uri getUri() "/>
    </class>
    <class name="android.telephony.CellSignalStrengthWcdma">
        <method signature="public void initialize(int, int) "/>
        <method signature="protected void copyFrom(android.telephony.CellSignalStrengthWcdma) "/>
        <method signature="public android.telephony.CellSignalStrengthWcdma copy() "/>
        <method signature="public void setDefaultValues() "/>
    </class>
    <class name="android.provider.Contacts.ContactMethods">
        <method signature="public static java.lang.String lookupProviderNameFromId(int) "/>
    </class>
    <class name="com.android.vcard.VCardEntry">
        <method signature="public final List&lt;com.android.vcard.VCardEntry&gt; getChildlen() "/>
    </class>
    <class name="android.net.wifi.p2p.nsd.WifiP2pServiceResponse.Status">
        <method signature="public static java.lang.String toString(int) "/>
    </class>
    <class name="android.view.View">
        <method signature="protected boolean performButtonActionOnTouchDown(android.view.MotionEvent) "/>
        <method signature="public boolean showContextMenu(float, float, int) "/>
        <method signature="protected boolean isVisibleToUser() "/>
        <method signature="protected boolean isVisibleToUser(android.graphics.Rect) "/>
        <method signature="public android.view.View.AccessibilityDelegate getAccessibilityDelegate() "/>
        <method signature="public int getAccessibilityViewId() "/>
        <method signature="public int getAccessibilityWindowId() "/>
        <method signature="protected void onFocusLost() "/>
        <method signature="protected boolean computeFitSystemWindows(android.graphics.Rect, android.graphics.Rect) "/>
        <method signature="public boolean fitsSystemWindows() "/>
        <method signature="public void makeOptionalFitsSystemWindows() "/>
        <method signature="public int getRawLayoutDirection() "/>
        <method signature="public boolean isLayoutRtl() "/>
        <method signature="public boolean isAccessibilityFocused() "/>
        <method signature="public boolean requestAccessibilityFocus() "/>
        <method signature="public void clearAccessibilityFocus() "/>
        <method signature="public boolean isImportantForAccessibility() "/>
        <method signature="public boolean includeForAccessibility() "/>
        <method signature="public boolean isActionableForAccessibility() "/>
        <method signature="public void notifyViewAccessibilityStateChangedIfNeeded(int) "/>
        <method signature="public void notifySubtreeAccessibilityStateChangedIfNeeded() "/>
        <method signature="public java.lang.CharSequence getIterableTextForAccessibility() "/>
        <method signature="public boolean isAccessibilitySelectionExtendable() "/>
        <method signature="public int getAccessibilitySelectionStart() "/>
        <method signature="public int getAccessibilitySelectionEnd() "/>
        <method signature="public void setAccessibilitySelection(int, int) "/>
        <method signature="public android.view.AccessibilityIterators.TextSegmentIterator getIteratorForGranularity(int) "/>
        <method signature="public void dispatchStartTemporaryDetach() "/>
        <method signature="public void dispatchFinishTemporaryDetach() "/>
        <method signature="protected boolean hasHoveredChild() "/>
        <method signature="public final boolean dispatchPointerEvent(android.view.MotionEvent) "/>
        <method signature="public boolean isInScrollingContainer() "/>
        <method signature="public void setTransitionAlpha(float) "/>
        <method signature="public float getTransitionAlpha() "/>
        <method signature="public boolean pointInView(float, float, float) "/>
        <method signature="public void resolveLayoutParams() "/>
        <method signature="protected void invalidateParentCaches() "/>
        <method signature="protected void invalidateParentIfNeeded() "/>
        <method signature="protected void computeOpaqueFlags() "/>
        <method signature="protected boolean hasOpaqueScrollbars() "/>
        <method signature="public android.view.ViewRootImpl getViewRootImpl() "/>
        <method signature="protected void recomputePadding() "/>
        <method signature="protected boolean isVerticalScrollBarHidden() "/>
        <method signature="protected void onDrawHorizontalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int) "/>
        <method signature="protected void onDrawVerticalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int) "/>
        <method signature="public boolean resolveRtlPropertiesIfNeeded() "/>
        <method signature="public void resetRtlProperties() "/>
        <method signature="public boolean resolveLayoutDirection() "/>
        <method signature="public void resetResolvedLayoutDirection() "/>
        <method signature="public boolean isLayoutDirectionInherited() "/>
        <method signature="public void resolvePadding() "/>
        <method signature="public void resetResolvedPadding() "/>
        <method signature="public boolean executeHardwareAction(java.lang.Runnable) "/>
        <method signature="protected void destroyHardwareResources() "/>
        <method signature="public void outputDirtyFlags(java.lang.String, boolean, int) "/>
        <method signature="protected void dispatchGetDisplayList() "/>
        <method signature="public boolean canHaveDisplayList() "/>
        <method signature="public android.view.HardwareRenderer getHardwareRenderer() "/>
        <method signature="public android.view.DisplayList getDisplayList() "/>
        <method signature="protected int getFadeTop(boolean) "/>
        <method signature="protected int getFadeHeight(boolean) "/>
        <method signature="public static boolean isLayoutModeOptical(java.lang.Object) "/>
        <method signature="protected boolean setFrame(int, int, int, int) "/>
        <method signature="protected void resolveDrawables() "/>
        <method signature="public void onResolveDrawables(int) "/>
        <method signature="protected void resetResolvedDrawables() "/>
        <method signature="protected void internalSetPadding(int, int, int, int) "/>
        <method signature="public void resetPaddingToInitialValues() "/>
        <method signature="public android.graphics.Insets getOpticalInsets() "/>
        <method signature="public boolean toGlobalMotionEvent(android.view.MotionEvent) "/>
        <method signature="public boolean toLocalMotionEvent(android.view.MotionEvent) "/>
        <method signature="protected android.view.View findViewTraversal(int) "/>
        <method signature="protected android.view.View findViewWithTagTraversal(java.lang.Object) "/>
        <method signature="protected android.view.View findViewByPredicateTraversal(Predicate&lt;android.view.View&gt;, android.view.View) "/>
        <method signature="public android.view.View findViewByAccessibilityIdTraversal(int) "/>
        <method signature="public final android.view.View findViewByPredicate(Predicate&lt;android.view.View&gt;) "/>
        <method signature="public final android.view.View findViewByPredicateInsideOut(android.view.View, Predicate&lt;android.view.View&gt;) "/>
        <method signature="public void setIsRootNamespace(boolean) "/>
        <method signature="public boolean isRootNamespace() "/>
        <method signature="public void setTagInternal(int, java.lang.Object) "/>
        <method signature="public void debug() "/>
        <method signature="protected void debug(int) "/>
        <method signature="protected static java.lang.String debugIndent(int) "/>
        <method signature="public boolean gatherTransparentRegion(android.graphics.Region) "/>
        <method signature="public void setDisabledSystemUiVisibility(int) "/>
        <method signature="public void onCloseSystemDialogs(java.lang.String) "/>
        <method signature="public void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable, android.graphics.Region) "/>
        <method signature="protected float getVerticalScrollFactor() "/>
        <method signature="protected float getHorizontalScrollFactor() "/>
        <method signature="public int getRawTextDirection() "/>
        <method signature="public boolean resolveTextDirection() "/>
        <method signature="public void resetResolvedTextDirection() "/>
        <method signature="public boolean isTextDirectionInherited() "/>
        <method signature="public int getRawTextAlignment() "/>
        <method signature="public boolean resolveTextAlignment() "/>
        <method signature="public void resetResolvedTextAlignment() "/>
        <method signature="public boolean isTextAlignmentInherited() "/>
        <method signature="public void hackTurnOffWindowResizeAnim(boolean) "/>
    </class>
    <class name="android.os.BatteryStats">
        <method signature="public abstract long getScreenOnTime(long, int) "/>
        <method signature="public abstract long getScreenBrightnessTime(int, long, int) "/>
        <method signature="public abstract long getPhoneOnTime(long, int) "/>
        <method signature="public abstract long getPhoneSignalStrengthTime(int, long, int) "/>
        <method signature="public abstract long getPhoneSignalScanningTime(long, int) "/>
        <method signature="public abstract int getPhoneSignalStrengthCount(int, int) "/>
        <method signature="public abstract long getPhoneDataConnectionTime(int, long, int) "/>
        <method signature="public abstract int getPhoneDataConnectionCount(int, int) "/>
        <method signature="public abstract long getWifiOnTime(long, int) "/>
        <method signature="public abstract long getGlobalWifiRunningTime(long, int) "/>
        <method signature="public abstract long getBluetoothOnTime(long, int) "/>
    </class>
    <class name="android.service.notification.StatusBarNotification">
        <method signature="public android.service.notification.StatusBarNotification cloneLight() "/>
        <method signature="public int getUid() "/>
        <method signature="public java.lang.String getBasePkg() "/>
        <method signature="public int getInitialPid() "/>
        <method signature="public android.os.UserHandle getUser() "/>
        <method signature="public int getScore() "/>
    </class>
    <class name="android.view.Display">
        <method signature="public boolean getDisplayInfo(android.view.DisplayInfo) "/>
        <method signature="public int getLayerStack() "/>
        <method signature="public int getType() "/>
        <method signature="public java.lang.String getAddress() "/>
        <method signature="public int getOwnerUid() "/>
        <method signature="public java.lang.String getOwnerPackageName() "/>
        <method signature="public android.view.DisplayAdjustments getDisplayAdjustments() "/>
        <method signature="public int getMaximumSizeDimension() "/>
        <method signature="public void getOverscanInsets(android.graphics.Rect) "/>
        <method signature="public boolean hasAccess(int) "/>
        <method signature="public static boolean hasAccess(int, int, int) "/>
        <method signature="public boolean isPublicPresentation() "/>
        <method signature="public static java.lang.String typeToString(int) "/>
    </class>
    <class name="android.content.ContextWrapper">
        <method signature="public int getThemeResId() "/>
        <method signature="public java.lang.String getBasePackageName() "/>
        <method signature="public java.lang.String getOpPackageName() "/>
        <method signature="public java.io.File getSharedPrefsFile(java.lang.String) "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public void startActivityAsUser(android.content.Intent, android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public void startActivitiesAsUser(android.content.Intent[], android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public void sendBroadcast(android.content.Intent, java.lang.String, int) "/>
        <method signature="public void sendOrderedBroadcast(android.content.Intent, java.lang.String, int, android.content.BroadcastReceiver, android.os.Handler, int, java.lang.String, android.os.Bundle) "/>
        <method signature="public android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver, android.os.UserHandle, android.content.IntentFilter, java.lang.String, android.os.Handler) "/>
        <method signature="public android.content.ComponentName startServiceAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public boolean stopServiceAsUser(android.content.Intent, android.os.UserHandle) "/>
        <method signature="public boolean bindServiceAsUser(android.content.Intent, android.content.ServiceConnection, int, android.os.UserHandle) "/>
        <method signature="public android.content.Context createPackageContextAsUser(java.lang.String, int, android.os.UserHandle) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public int getUserId() "/>
        <method signature="public android.view.DisplayAdjustments getDisplayAdjustments(int) "/>
    </class>
    <class name="android.bluetooth.BluetoothDevice">
        <method signature="public java.lang.String getAlias() "/>
        <method signature="public boolean setAlias(java.lang.String) "/>
        <method signature="public java.lang.String getAliasName() "/>
        <method signature="public boolean createBondOutOfBand(byte[], byte[]) "/>
        <method signature="public boolean setDeviceOutOfBandData(byte[], byte[]) "/>
        <method signature="public boolean cancelBondProcess() "/>
        <method signature="public boolean removeBond() "/>
        <method signature="public boolean getTrustState() "/>
        <method signature="public boolean setTrust(boolean) "/>
        <method signature="public int getServiceChannel(android.os.ParcelUuid) "/>
        <method signature="public boolean setPasskey(int) "/>
        <method signature="public boolean setRemoteOutOfBandData() "/>
        <method signature="public boolean cancelPairingUserInput() "/>
        <method signature="public boolean isBluetoothDock() "/>
        <method signature="public android.bluetooth.BluetoothSocket createRfcommSocket(int) throws java.io.IOException"/>
        <method signature="public android.bluetooth.BluetoothSocket createInsecureRfcommSocket(int) throws java.io.IOException"/>
        <method signature="public android.bluetooth.BluetoothSocket createScoSocket() throws java.io.IOException"/>
        <method signature="public static byte[] convertPinToBytes(java.lang.String) "/>
    </class>
    <class name="android.content.IntentSender">
        <method signature="public IIntentSender getTarget() "/>
    </class>
    <class name="android.bluetooth.BluetoothGattCharacteristic">
        <method signature="public void setKeySize(int) "/>
    </class>
    <class name="android.widget.ZoomButtonsController">
        <method signature="public boolean onTouch(android.view.View, android.view.MotionEvent) "/>
    </class>
    <class name="android.support.v4.util.TimeUtils">
        <method signature="public static void formatDuration(long, java.lang.StringBuilder) "/>
        <method signature="public static void formatDuration(long, java.io.PrintWriter, int) "/>
        <method signature="public static void formatDuration(long, java.io.PrintWriter) "/>
        <method signature="public static void formatDuration(long, long, java.io.PrintWriter) "/>
    </class>
    <class name="android.view.inputmethod.InputMethodInfo">
        <method signature="public boolean isDefault(android.content.Context) "/>
        <method signature="public boolean isAuxiliaryIme() "/>
        <method signature="public boolean supportsSwitchingToNextInputMethod() "/>
    </class>
    <class name="android.widget.ListView">
        <method signature="protected boolean recycleOnMeasure() "/>
        <method signature="protected android.view.View findViewByPredicateTraversal(Predicate&lt;android.view.View&gt;, android.view.View) "/>
    </class>
    <class name="android.bluetooth.BluetoothGattService">
        <method signature="public void setInstanceId(int) "/>
        <method signature="public void setHandles(int) "/>
    </class>
    <class name="android.os.Looper">
        <method signature="public boolean isCurrentThread() "/>
        <method signature="public int postSyncBarrier() "/>
        <method signature="public void removeSyncBarrier(int) "/>
        <method signature="public android.os.MessageQueue getQueue() "/>
        <method signature="public boolean isIdling() "/>
    </class>
    <class name="android.os.UserHandle">
        <method signature="public static final boolean isSameUser(int, int) "/>
        <method signature="public static final boolean isSameApp(int, int) "/>
        <method signature="public static final boolean isIsolated(int) "/>
        <method signature="public static boolean isApp(int) "/>
        <method signature="public static final int getUserId(int) "/>
        <method signature="public static final int getCallingUserId() "/>
        <method signature="public static final int getUid(int, int) "/>
        <method signature="public static final int getAppId(int) "/>
        <method signature="public static final int getSharedAppGid(int) "/>
        <method signature="public static void formatUid(java.lang.StringBuilder, int) "/>
        <method signature="public static void formatUid(java.io.PrintWriter, int) "/>
        <method signature="public static final int myUserId() "/>
        <method signature="public int getIdentifier() "/>
    </class>
    <class name="android.provider.MediaStore.Files">
        <method signature="public static android.net.Uri getMtpObjectsUri(java.lang.String) "/>
        <method signature="public static final android.net.Uri getMtpObjectsUri(java.lang.String, long) "/>
        <method signature="public static final android.net.Uri getMtpReferencesUri(java.lang.String, long) "/>
    </class>
    <class name="android.support.v4.content.AsyncTaskLoader">
        <method signature="public void waitForLoader() "/>
    </class>
    <class name="android.media.MediaRouter.RouteCategory">
        <method signature="public boolean isSystem() "/>
    </class>
    <class name="android.graphics.BitmapShader">
        <method signature="protected android.graphics.Shader copy() "/>
    </class>
    <class name="android.print.PrintDocumentInfo">
        <method signature="public void setDataSize(long) "/>
    </class>
    <class name="java.util.concurrent.ScheduledThreadPoolExecutor">
        <method signature="public void setRemoveOnCancelPolicy(boolean) "/>
        <method signature="public boolean getRemoveOnCancelPolicy() "/>
    </class>
    <class name="android.text.GraphicsOperations">
        <method signature="public abstract void drawTextRun(android.graphics.Canvas, int, int, int, int, float, float, int, android.graphics.Paint) "/>
        <method signature="public abstract float getTextRunAdvances(int, int, int, int, int, float[], int, android.graphics.Paint) "/>
        <method signature="public abstract int getTextRunCursor(int, int, int, int, int, android.graphics.Paint) "/>
    </class>
    <class name="android.webkit.WebView.HitTestResult">
        <method signature="public void setType(int) "/>
        <method signature="public void setExtra(java.lang.String) "/>
    </class>
    <class name="android.os.AsyncTask">
        <method signature="public static void init() "/>
        <method signature="public static void setDefaultExecutor(java.util.concurrent.Executor) "/>
    </class>
    <class name="android.gesture.GestureOverlayView">
        <method signature="public android.graphics.Paint getGesturePaint() "/>
    </class>
    <class name="android.text.Layout">
        <method signature="public void drawText(android.graphics.Canvas, int, int) "/>
        <method signature="public void drawBackground(android.graphics.Canvas, android.graphics.Path, android.graphics.Paint, int, int, int) "/>
        <method signature="public long getLineRangeForDraw(android.graphics.Canvas) "/>
        <method signature="public final android.text.TextDirectionHeuristic getTextDirectionHeuristic() "/>
        <method signature="public boolean isLevelBoundary(int) "/>
        <method signature="public float getPrimaryHorizontal(int, boolean) "/>
        <method signature="public float getSecondaryHorizontal(int, boolean) "/>
        <method signature="public boolean shouldClampCursor(int) "/>
    </class>
    <class name="android.content.pm.ComponentInfo">
        <method signature="protected android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager) "/>
        <method signature="protected android.graphics.drawable.Drawable loadDefaultLogo(android.content.pm.PackageManager) "/>
        <method signature="protected android.content.pm.ApplicationInfo getApplicationInfo() "/>
    </class>
    <class name="android.telephony.CellInfo">
        <method signature="public void setRegisterd(boolean) "/>
        <method signature="public void setTimeStamp(long) "/>
        <method signature="public int getTimeStampType() "/>
        <method signature="public void setTimeStampType(int) "/>
        <method signature="protected void writeToParcel(android.os.Parcel, int, int) "/>
    </class>
    <class name="android.text.TextUtils">
        <method signature="public static java.lang.CharSequence join(Iterable&lt;java.lang.CharSequence&gt;) "/>
        <method signature="public static java.lang.CharSequence ellipsize(java.lang.CharSequence, android.text.TextPaint, float, android.text.TextUtils.TruncateAt, boolean, android.text.TextUtils.EllipsizeCallback, android.text.TextDirectionHeuristic, java.lang.String) "/>
        <method signature="public static java.lang.CharSequence commaEllipsize(java.lang.CharSequence, android.text.TextPaint, float, java.lang.String, java.lang.String, android.text.TextDirectionHeuristic) "/>
        <method signature="public static boolean isPrintableAscii(char) "/>
        <method signature="public static boolean isPrintableAsciiOnly(java.lang.CharSequence) "/>
        <method signature="public static boolean delimitedStringContains(java.lang.String, char, java.lang.String) "/>
        <method signature="public static T[] removeEmptySpans(T[], android.text.Spanned, Class&lt;T&gt;) "/>
        <method signature="public static long packRangeInLong(int, int) "/>
        <method signature="public static int unpackRangeStartFromLong(long) "/>
        <method signature="public static int unpackRangeEndFromLong(long) "/>
    </class>
    <class name="android.net.WifiLinkQualityInfo">
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
        <method signature="public static android.net.WifiLinkQualityInfo createFromParcelBody(android.os.Parcel) "/>
        <method signature="public void setType(int) "/>
        <method signature="public void setBssid(java.lang.String) "/>
        <method signature="public void setRssi(int) "/>
        <method signature="public void setTxGood(long) "/>
        <method signature="public void setTxBad(long) "/>
    </class>
    <class name="android.support.v8.renderscript.Matrix4f">
        <method signature="public void load(android.support.v8.renderscript.Matrix3f) "/>
    </class>
    <class name="android.webkit.JsResult">
        <method signature="public final boolean getResult() "/>
    </class>
    <class name="android.hardware.camera2.impl.CameraMetadataNative">
        <method signature="public void swap(android.hardware.camera2.impl.CameraMetadataNative) "/>
        <method signature="public int getEntryCount() "/>
        <method signature="public boolean isEmpty() "/>
        <method signature="public static int getTag(java.lang.String) "/>
        <method signature="public static int getNativeType(int) "/>
        <method signature="public void writeValues(int, byte[]) "/>
        <method signature="public byte[] readValues(int) "/>
        <method signature="public static void registerEnumValues(Class&lt;T&gt;, int[]) "/>
    </class>
    <class name="java.lang.Byte">
        <method signature="public static java.lang.String toHexString(byte, boolean) "/>
    </class>
    <class name="android.content.PeriodicSync">
        <method signature="public static boolean syncExtrasEquals(android.os.Bundle, android.os.Bundle) "/>
    </class>
    <class name="android.bluetooth.BluetoothHeadset">
        <method signature="public boolean connect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean disconnect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean setPriority(android.bluetooth.BluetoothDevice, int) "/>
        <method signature="public int getPriority(android.bluetooth.BluetoothDevice) "/>
        <method signature="public int getBatteryUsageHint(android.bluetooth.BluetoothDevice) "/>
        <method signature="public static boolean isBluetoothVoiceDialingEnabled(android.content.Context) "/>
        <method signature="public boolean acceptIncomingConnect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean rejectIncomingConnect(android.bluetooth.BluetoothDevice) "/>
        <method signature="public int getAudioState(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean isAudioOn() "/>
        <method signature="public boolean connectAudio() "/>
        <method signature="public boolean disconnectAudio() "/>
        <method signature="public boolean startScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice) "/>
        <method signature="public boolean stopScoUsingVirtualVoiceCall(android.bluetooth.BluetoothDevice) "/>
        <method signature="public void phoneStateChanged(int, int, int, java.lang.String, int) "/>
        <method signature="public void clccResponse(int, int, int, int, boolean, java.lang.String, int) "/>
    </class>
    <class name="com.android.internal.telephony.PhoneBase">
        <method signature="public int getVoiceMessageCount() "/>
    </class>
    <class name="android.webkit.UrlInterceptHandler">
        <method signature="public abstract android.webkit.CacheManager.CacheResult service(java.lang.String, Map&lt;java.lang.String,java.lang.String&gt;) "/>
        <method signature="public abstract android.webkit.PluginData getPluginData(java.lang.String, Map&lt;java.lang.String,java.lang.String&gt;) "/>
    </class>
    <class name="com.android.internal.telephony.PhoneSubInfo">
        <method signature="public java.lang.String getCompleteVoiceMailNumber() "/>
    </class>
    <class name="android.print.PrintManager">
        <method signature="public android.print.PrintManager getGlobalPrintManagerForUser(int) "/>
        <method signature="public void addPrintJobStateChangeListener(android.print.PrintManager.PrintJobStateChangeListener) "/>
        <method signature="public void removePrintJobStateChangeListener(android.print.PrintManager.PrintJobStateChangeListener) "/>
        <method signature="public android.print.PrintJob getPrintJob(android.print.PrintJobId) "/>
        <method signature="public List&lt;android.printservice.PrintServiceInfo&gt; getEnabledPrintServices() "/>
        <method signature="public List&lt;android.printservice.PrintServiceInfo&gt; getInstalledPrintServices() "/>
        <method signature="public android.print.PrinterDiscoverySession createPrinterDiscoverySession() "/>
    </class>
    <class name="java.lang.ref.Reference">
        <method signature="public final synchronized boolean enqueueInternal() "/>
    </class>
    <class name="android.accounts.AccountManager">
        <method signature="public static android.os.Bundle sanitizeResult(android.os.Bundle) "/>
        <method signature="public android.accounts.Account[] getAccountsForPackage(java.lang.String, int) "/>
        <method signature="public android.accounts.Account[] getAccountsByTypeAsUser(java.lang.String, android.os.UserHandle) "/>
        <method signature="public void updateAppPermission(android.accounts.Account, java.lang.String, int, boolean) "/>
        <method signature="public AccountManagerFuture&lt;java.lang.String&gt; getAuthTokenLabel(java.lang.String, java.lang.String, AccountManagerCallback&lt;java.lang.String&gt;, android.os.Handler) "/>
        <method signature="public boolean addSharedAccount(android.accounts.Account, android.os.UserHandle) "/>
        <method signature="public boolean removeSharedAccount(android.accounts.Account, android.os.UserHandle) "/>
        <method signature="public android.accounts.Account[] getSharedAccounts(android.os.UserHandle) "/>
        <method signature="public AccountManagerFuture&lt;android.os.Bundle&gt; confirmCredentialsAsUser(android.accounts.Account, android.os.Bundle, android.app.Activity, AccountManagerCallback&lt;android.os.Bundle&gt;, android.os.Handler, android.os.UserHandle) "/>
    </class>
    <class name="com.android.systemui.media.NotificationPlayer">
        <method signature="public void setUsesWakeLock(android.content.Context) "/>
    </class>
    <class name="android.app.Notification.Style">
        <method signature="public void addExtras(android.os.Bundle) "/>
        <method signature="public abstract android.app.Notification buildStyled(android.app.Notification) "/>
    </class>
    <class name="android.provider.Telephony.Sms">
        <method signature="public static android.database.Cursor query(android.content.ContentResolver, java.lang.String[]) "/>
        <method signature="public static android.database.Cursor query(android.content.ContentResolver, java.lang.String[], java.lang.String, java.lang.String) "/>
        <method signature="public static android.net.Uri addMessageToUri(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean, boolean) "/>
        <method signature="public static android.net.Uri addMessageToUri(android.content.ContentResolver, android.net.Uri, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean, boolean, long) "/>
        <method signature="public static boolean moveMessageToFolder(android.content.Context, android.net.Uri, int, int) "/>
        <method signature="public static boolean isOutgoingFolder(int) "/>
    </class>
    <class name="android.graphics.RectF">
        <method signature="public java.lang.String toShortString(java.lang.StringBuilder) "/>
        <method signature="public void printShortString(java.io.PrintWriter) "/>
    </class>
    <class name="android.view.WindowManagerGlobal">
        <method signature="public void changeCanvasOpacity(android.os.IBinder, boolean) "/>
    </class>
    <class name="android.text.TextPaint">
        <method signature="public void setUnderlineText(int, float) "/>
    </class>
    <class name="android.app.admin.DeviceAdminInfo">
        <method signature="public ArrayList&lt;android.app.admin.DeviceAdminInfo.PolicyInfo&gt; getUsedPolicies() "/>
        <method signature="public void writePoliciesToXml(org.xmlpull.v1.XmlSerializer) throws java.lang.IllegalArgumentException, java.lang.IllegalStateException, java.io.IOException"/>
        <method signature="public void readPoliciesFromXml(org.xmlpull.v1.XmlPullParser) throws org.xmlpull.v1.XmlPullParserException, java.io.IOException"/>
    </class>
    <class name="android.opengl.ManagedEGLContext">
        <method signature="public static boolean doTerminate() "/>
    </class>
    <class name="android.app.SearchManager">
        <method signature="public void startSearch(java.lang.String, boolean, android.content.ComponentName, android.os.Bundle, boolean, android.graphics.Rect) "/>
        <method signature="public List&lt;android.content.pm.ResolveInfo&gt; getGlobalSearchActivities() "/>
        <method signature="public android.content.ComponentName getWebSearchActivity() "/>
        <method signature="public boolean isVisible() "/>
        <method signature="public android.database.Cursor getSuggestions(android.app.SearchableInfo, java.lang.String) "/>
        <method signature="public android.database.Cursor getSuggestions(android.app.SearchableInfo, java.lang.String, int) "/>
        <method signature="public android.content.Intent getAssistIntent(android.content.Context, boolean) "/>
        <method signature="public android.content.Intent getAssistIntent(android.content.Context, boolean, int) "/>
    </class>
    <class name="android.bluetooth.BluetoothClass">
        <method signature="public boolean doesClassMatch(int) "/>
    </class>
    <class name="android.transition.TransitionSet">
        <method signature="protected void createAnimators(android.view.ViewGroup, android.transition.TransitionValuesMaps, android.transition.TransitionValuesMaps) "/>
        <method signature="protected void runAnimators() "/>
        <method signature="public void pause() "/>
        <method signature="public void resume() "/>
        <method signature="protected void cancel() "/>
    </class>
    <class name="android.graphics.Canvas">
        <method signature="public int getNativeCanvas() "/>
        <method signature="protected javax.microedition.khronos.opengles.GL getGL() "/>
        <method signature="public void setViewport(int, int) "/>
        <method signature="public void setScreenDensity(int) "/>
        <method signature="protected static void throwIfCannotDraw(android.graphics.Bitmap) "/>
        <method signature="public void drawPatch(android.graphics.NinePatch, android.graphics.Rect, android.graphics.Paint) "/>
        <method signature="public void drawPatch(android.graphics.NinePatch, android.graphics.RectF, android.graphics.Paint) "/>
        <method signature="protected static void checkRange(int, int, int) "/>
        <method signature="public void drawTextRun(char[], int, int, int, int, float, float, int, android.graphics.Paint) "/>
        <method signature="public void drawTextRun(java.lang.CharSequence, int, int, int, int, float, float, int, android.graphics.Paint) "/>
        <method signature="public void release() "/>
        <method signature="public static native void freeCaches() "/>
        <method signature="public static native void freeTextLayoutCaches() "/>
    </class>
    <class name="android.app.LauncherActivity">
        <method signature="protected void onSortResultList(List&lt;android.content.pm.ResolveInfo&gt;) "/>
        <method signature="protected boolean onEvaluateShowIcons() "/>
    </class>
    <class name="android.appwidget.AppWidgetHostView">
        <method signature="public void setUserId(int) "/>
        <method signature="public void setOnClickHandler(android.widget.RemoteViews.OnClickHandler) "/>
        <method signature="public void updateAppWidgetSize(android.os.Bundle, int, int, int, int, boolean) "/>
    </class>
    <class name="android.view.LayoutInflater">
        <method signature="public void setPrivateFactory(android.view.LayoutInflater.Factory2) "/>
    </class>
    <class name="android.gesture.GestureLibrary">
        <method signature="public android.gesture.Learner getLearner() "/>
    </class>
    <class name="android.app.AlarmManager">
        <method signature="public void set(int, long, long, long, android.app.PendingIntent, android.os.WorkSource) "/>
    </class>
    <class name="android.hardware.Sensor">
        <method signature="public int getHandle() "/>
    </class>
    <class name="android.provider.Telephony.Sms.Outbox">
        <method signature="public static android.net.Uri addMessage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean, long) "/>
    </class>
    <class name="android.widget.TextView">
        <method signature="public final android.content.UndoManager getUndoManager() "/>
        <method signature="public final void setUndoManager(android.content.UndoManager, java.lang.String) "/>
        <method signature="public final void setShowSoftInputOnFocus(boolean) "/>
        <method signature="public final boolean getShowSoftInputOnFocus() "/>
        <method signature="public boolean getHorizontallyScrolling() "/>
        <method signature="public int getHorizontalOffsetForDrawables() "/>
        <method signature="protected int getFadeTop(boolean) "/>
        <method signature="protected int getFadeHeight(boolean) "/>
        <method signature="public void resetErrorChangedFlag() "/>
        <method signature="public void hideErrorIfUnchanged() "/>
        <method signature="public void setExtracting(android.view.inputmethod.ExtractedTextRequest) "/>
        <method signature="protected void makeNewLayout(int, int, android.text.BoringLayout.Metrics, android.text.BoringLayout.Metrics, int, boolean) "/>
        <method signature="public void dispatchFinishTemporaryDetach() "/>
        <method signature="public java.util.Locale getTextServicesLocale() "/>
        <method signature="public java.util.Locale getSpellCheckerLocale() "/>
        <method signature="public android.text.method.WordIterator getWordIterator() "/>
        <method signature="public java.lang.CharSequence getTextForAccessibility() "/>
        <method signature="protected void stopSelectionActionMode() "/>
        <method signature="public void onResolveDrawables(int) "/>
        <method signature="protected void resetResolvedDrawables() "/>
        <method signature="protected void viewClicked(android.view.inputmethod.InputMethodManager) "/>
        <method signature="protected void deleteText_internal(int, int) "/>
        <method signature="protected void replaceText_internal(int, int, java.lang.CharSequence) "/>
        <method signature="protected void setSpan_internal(java.lang.Object, int, int, int) "/>
        <method signature="protected void setCursorPosition_internal(int, int) "/>
        <method signature="public java.lang.CharSequence getIterableTextForAccessibility() "/>
        <method signature="public android.view.AccessibilityIterators.TextSegmentIterator getIteratorForGranularity(int) "/>
        <method signature="public int getAccessibilitySelectionStart() "/>
        <method signature="public boolean isAccessibilitySelectionExtendable() "/>
        <method signature="public int getAccessibilitySelectionEnd() "/>
        <method signature="public void setAccessibilitySelection(int, int) "/>
    </class>
    <class name="android.support.v4.app.FragmentManager">
        <method signature="public android.support.v4.app.FragmentTransaction openTransaction() "/>
        <method signature="public abstract List&lt;android.support.v4.app.Fragment&gt; getFragments() "/>
    </class>
    <class name="android.view.accessibility.CaptioningManager">
        <method signature="public final java.lang.String getRawLocale() "/>
        <method signature="public int getRawUserStyle() "/>
    </class>
    <class name="android.webkit.URLUtil">
        <method signature="public static boolean isResourceUrl(java.lang.String) "/>
    </class>
    <class name="android.media.SubtitleTrack">
        <method signature="public final android.media.MediaFormat getFormat() "/>
        <method signature="public abstract void updateView(Vector&lt;android.media.SubtitleTrack.Cue&gt;) "/>
        <method signature="protected synchronized void updateActiveCues(boolean, long) "/>
        <method signature="protected synchronized void clearActiveCues() "/>
        <method signature="protected void scheduleTimedEvents() "/>
        <method signature="public void onTimedEvent(long) "/>
        <method signature="public void onSeek(long) "/>
        <method signature="public void onStop() "/>
        <method signature="public void show() "/>
        <method signature="public void hide() "/>
        <method signature="protected synchronized boolean addCue(android.media.SubtitleTrack.Cue) "/>
        <method signature="public synchronized void setTimeProvider(android.media.MediaTimeProvider) "/>
        <method signature="protected void finishedRun(long) "/>
        <method signature="public void setRunDiscardTimeMs(long, long) "/>
    </class>
    <class name="android.test.LaunchPerformanceBase">
        <method signature="protected void LaunchApp() "/>
    </class>
    <class name="android.view.ActionMode">
        <method signature="public boolean isUiFocusable() "/>
    </class>
    <class name="android.drm.DrmManagerClient">
        <method signature="public static void notify(java.lang.Object, int, int, java.lang.String) "/>
        <method signature="public void installDrmEngine(java.lang.String) "/>
    </class>
    <class name="android.location.LocationProvider">
        <method signature="public static boolean propertiesMeetCriteria(java.lang.String, com.android.internal.location.ProviderProperties, android.location.Criteria) "/>
    </class>
    <class name="javax.microedition.khronos.egl.EGL10">
        <method signature="public abstract boolean eglReleaseThread() "/>
    </class>
    <class name="android.app.DialogFragment">
        <method signature="public android.view.LayoutInflater getLayoutInflater(android.os.Bundle) "/>
    </class>
    <class name="android.net.LinkAddress">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.view.ViewRootImpl">
        <method signature="public void requestTransitionStart(android.animation.LayoutTransition) "/>
        <method signature="public void setDrawDuringWindowsAnimating(boolean) "/>
        <method signature="public android.view.View getAccessibilityFocusedHost() "/>
        <method signature="public android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView() "/>
    </class>
    <class name="android.provider.Settings.Global">
        <method signature="public static final java.lang.String getBluetoothHeadsetPriorityKey(java.lang.String) "/>
        <method signature="public static final java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String) "/>
        <method signature="public static final java.lang.String getBluetoothInputDevicePriorityKey(java.lang.String) "/>
        <method signature="public static final java.lang.String getBluetoothMapPriorityKey(java.lang.String) "/>
        <method signature="public static java.lang.String getStringForUser(android.content.ContentResolver, java.lang.String, int) "/>
        <method signature="public static boolean putStringForUser(android.content.ContentResolver, java.lang.String, java.lang.String, int) "/>
    </class>
    <class name="android.bluetooth.BluetoothSocket">
        <method signature="protected void finalize() throws java.lang.Throwable"/>
    </class>
    <class name="android.hardware.input.InputManager.InputDeviceVibrator">
        <method signature="public void vibrate(int, java.lang.String, long) "/>
        <method signature="public void vibrate(int, java.lang.String, long[], int) "/>
    </class>
    <class name="android.app.backup.BackupAgent">
        <method signature="protected final void fullBackupFileTree(java.lang.String, java.lang.String, java.lang.String, HashSet&lt;java.lang.String&gt;, android.app.backup.FullBackupDataOutput) "/>
        <method signature="protected void onRestoreFile(android.os.ParcelFileDescriptor, long, int, java.lang.String, java.lang.String, long, long) throws java.io.IOException"/>
        <method signature="public final android.os.IBinder onBind() "/>
        <method signature="public void attach(android.content.Context) "/>
    </class>
    <class name="android.widget.RemoteViews">
        <method signature="public void mergeRemoteViews(android.widget.RemoteViews) "/>
        <method signature="public void setUser(android.os.UserHandle) "/>
        <method signature="public int estimateMemoryUsage() "/>
        <method signature="public void setDrawableParameters(int, boolean, int, int, android.graphics.PorterDuff.Mode, int) "/>
        <method signature="public void setRemoteAdapter(int, ArrayList&lt;android.widget.RemoteViews&gt;, int) "/>
        <method signature="public android.view.View apply(android.content.Context, android.view.ViewGroup, android.widget.RemoteViews.OnClickHandler) "/>
        <method signature="public void reapply(android.content.Context, android.view.View, android.widget.RemoteViews.OnClickHandler) "/>
    </class>
    <class name="android.service.dreams.DreamService">
        <method signature="public void setDebug(boolean) "/>
        <method signature="public void setLowProfile(boolean) "/>
        <method signature="public boolean isLowProfile() "/>
    </class>
    <class name="android.service.wallpaper.WallpaperService.Engine">
        <method signature="public void setFixedSizeAllowed(boolean) "/>
    </class>
    <class name="android.webkit.PluginData">
        <method signature="public java.io.InputStream getInputStream() "/>
        <method signature="public long getContentLength() "/>
        <method signature="public Map&lt;java.lang.String,java.lang.String[]&gt; getHeaders() "/>
        <method signature="public int getStatusCode() "/>
    </class>
    <class name="android.text.method.BaseMovementMethod">
        <method signature="protected boolean leftWord(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean rightWord(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean scrollLeft(android.widget.TextView, android.text.Spannable, int) "/>
        <method signature="protected boolean scrollRight(android.widget.TextView, android.text.Spannable, int) "/>
        <method signature="protected boolean scrollUp(android.widget.TextView, android.text.Spannable, int) "/>
        <method signature="protected boolean scrollDown(android.widget.TextView, android.text.Spannable, int) "/>
        <method signature="protected boolean scrollPageUp(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean scrollPageDown(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean scrollTop(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean scrollBottom(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean scrollLineStart(android.widget.TextView, android.text.Spannable) "/>
        <method signature="protected boolean scrollLineEnd(android.widget.TextView, android.text.Spannable) "/>
    </class>
    <class name="android.view.Surface">
        <method signature="public void destroy() "/>
        <method signature="public int getGenerationId() "/>
        <method signature="public boolean isConsumerRunningBehind() "/>
        <method signature="public void copyFrom(android.view.SurfaceControl) "/>
        <method signature="public void transferFrom(android.view.Surface) "/>
        <method signature="public static java.lang.String rotationToString(int) "/>
    </class>
    <class name="android.view.inputmethod.BaseInputConnection">
        <method signature="public static void setComposingSpans(android.text.Spannable, int, int) "/>
        <method signature="protected void reportFinish() "/>
    </class>
    <class name="android.test.AndroidTestCase">
        <method signature="public void setTestContext(android.content.Context) "/>
        <method signature="public android.content.Context getTestContext() "/>
    </class>
    <class name="android.content.res.TypedArray">
        <method signature="public java.lang.String getNonConfigurationString(int, int) "/>
    </class>
    <class name="android.view.HardwareRenderer">
        <method signature="public static void disable(boolean) "/>
        <method signature="public static void setupDiskCache(java.io.File) "/>
        <method signature="public abstract android.view.DisplayList createDisplayList(java.lang.String) "/>
    </class>
    <class name="com.android.server.ConnectivityService">
        <method signature="public void captivePortalCheckComplete(android.net.NetworkInfo) "/>
        <method signature="public void captivePortalCheckCompleted(android.net.NetworkInfo, boolean) "/>
        <method signature="public boolean protectVpn(android.os.ParcelFileDescriptor) "/>
        <method signature="public boolean prepareVpn(java.lang.String, java.lang.String) "/>
        <method signature="public android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig) "/>
        <method signature="public com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo() "/>
        <method signature="public com.android.internal.net.VpnConfig getVpnConfig() "/>
    </class>
    <class name="android.telephony.SignalStrength">
        <method signature="public static android.telephony.SignalStrength newFromBundle(android.os.Bundle) "/>
        <method signature="public void initialize(int, int, int, int, int, int, int, boolean) "/>
        <method signature="public void initialize(int, int, int, int, int, int, int, int, int, int, int, int, boolean) "/>
        <method signature="protected void copyFrom(android.telephony.SignalStrength) "/>
        <method signature="public static android.telephony.SignalStrength makeSignalStrengthFromRilParcel(android.os.Parcel) "/>
        <method signature="public void validateInput() "/>
        <method signature="public void setGsm(boolean) "/>
        <method signature="public int getLteSignalStrength() "/>
        <method signature="public int getLteRsrp() "/>
        <method signature="public int getLteRsrq() "/>
        <method signature="public int getLteRssnr() "/>
        <method signature="public int getLteCqi() "/>
        <method signature="public int getLevel() "/>
        <method signature="public int getAsuLevel() "/>
        <method signature="public int getDbm() "/>
        <method signature="public int getGsmDbm() "/>
        <method signature="public int getGsmLevel() "/>
        <method signature="public int getGsmAsuLevel() "/>
        <method signature="public int getCdmaLevel() "/>
        <method signature="public int getCdmaAsuLevel() "/>
        <method signature="public int getEvdoLevel() "/>
        <method signature="public int getEvdoAsuLevel() "/>
        <method signature="public int getLteDbm() "/>
        <method signature="public int getLteLevel() "/>
        <method signature="public int getLteAsuLevel() "/>
        <method signature="public void fillInNotifierBundle(android.os.Bundle) "/>
    </class>
    <class name="com.android.internal.telephony.gsm.SmsMessage">
        <method signature="public static com.android.internal.telephony.gsm.SmsMessage newFromCMT(java.lang.String[]) "/>
        <method signature="public static com.android.internal.telephony.gsm.SmsMessage newFromCDS(java.lang.String) "/>
        <method signature="public static com.android.internal.telephony.gsm.SmsMessage createFromEfRecord(int, byte[]) "/>
        <method signature="public static com.android.internal.telephony.gsm.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, byte[]) "/>
        <method signature="public static com.android.internal.telephony.gsm.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, byte[], int, int, int) "/>
    </class>
    <class name="android.view.HardwareCanvas">
        <method signature="public void setName(java.lang.String) "/>
        <method signature="public java.lang.String getName() "/>
        <method signature="public abstract int onPreDraw(android.graphics.Rect) "/>
        <method signature="public abstract void onPostDraw() "/>
        <method signature="public abstract int drawDisplayList(android.view.DisplayList, android.graphics.Rect, int) "/>
        <method signature="public int callDrawGLFunction(int) "/>
        <method signature="public int invokeFunctors(android.graphics.Rect) "/>
    </class>
    <class name="android.app.UiAutomation">
        <method signature="public void connect() "/>
        <method signature="public void disconnect() "/>
        <method signature="public int getConnectionId() "/>
    </class>
    <class name="android.media.MediaPlayer">
        <method signature="public android.os.Parcel newRequest() "/>
        <method signature="public void invoke(android.os.Parcel, android.os.Parcel) "/>
        <method signature="public void setDataSource(java.lang.String, Map&lt;java.lang.String,java.lang.String&gt;) throws java.io.IOException, java.lang.IllegalArgumentException, java.lang.SecurityException, java.lang.IllegalStateException"/>
        <method signature="public android.media.Metadata getMetadata(boolean, boolean) "/>
        <method signature="public int setMetadataFilter(Set&lt;java.lang.Integer&gt;, Set&lt;java.lang.Integer&gt;) "/>
        <method signature="public void setVolume(float) "/>
        <method signature="public void setSubtitleAnchor(android.media.SubtitleController, android.media.SubtitleController.Anchor) "/>
        <method signature="public void onSubtitleTrackSelected(android.media.SubtitleTrack) "/>
        <method signature="public void addSubtitleSource(java.io.InputStream, android.media.MediaFormat) throws java.lang.IllegalStateException"/>
        <method signature="public static native int native_pullBatteryData(android.os.Parcel) "/>
        <method signature="public void setRetransmitEndpoint(java.net.InetSocketAddress) throws java.lang.IllegalStateException, java.lang.IllegalArgumentException"/>
        <method signature="public android.media.MediaTimeProvider getMediaTimeProvider() "/>
        <method signature="public void setOnSubtitleDataListener(android.media.MediaPlayer.OnSubtitleDataListener) "/>
    </class>
    <class name="android.util.LruCache">
        <method signature="public void resize(int) "/>
    </class>
    <class name="java.util.LinkedHashMap">
        <method signature="public Entry&lt;K,V&gt; eldest() "/>
    </class>
    <class name="android.widget.Gallery">
        <method signature="public void setCallbackOnUnselectedItemClick(boolean) "/>
    </class>
    <class name="android.webkit.WebSettings.ZoomDensity">
        <method signature="public int getValue() "/>
    </class>
    <class name="android.net.nsd.NsdManager">
        <method signature="public void setEnabled(boolean) "/>
    </class>
    <class name="android.bluetooth.BluetoothAdapter.GattCallbackWrapper">
        <method signature="public void onScanResult(java.lang.String, int, byte[]) "/>
    </class>
    <class name="android.view.MotionEvent.PointerCoords">
        <method signature="public static android.view.MotionEvent.PointerCoords[] createArray(int) "/>
    </class>
    <class name="android.widget.Editor">
        <method signature="public android.text.method.WordIterator getWordIterator() "/>
    </class>
    <class name="android.nfc.cardemulation.CardEmulation">
        <method signature="public boolean setDefaultServiceForCategory(android.content.ComponentName, java.lang.String) "/>
        <method signature="public boolean setDefaultForNextTap(android.content.ComponentName) "/>
        <method signature="public List&lt;android.nfc.cardemulation.ApduServiceInfo&gt; getServices(java.lang.String) "/>
    </class>
    <class name="java.net.NetworkInterface">
        <method signature="public static void collectIpv6Addresses(java.lang.String, int, List&lt;java.net.InetAddress&gt;, List&lt;java.net.InterfaceAddress&gt;, java.lang.String[]) throws java.net.SocketException"/>
    </class>
    <class name="android.net.wifi.ScanResult">
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.webkit.WebHistoryItem">
        <method signature="public int getId() "/>
    </class>
    <class name="android.graphics.drawable.Drawable.ConstantState">
        <method signature="public android.graphics.Bitmap getBitmap() "/>
    </class>
    <class name="java.lang.reflect.Constructor">
        <method signature="public int getDexMethodIndex() "/>
    </class>
    <class name="android.os.WorkSource">
        <method signature="public int size() "/>
        <method signature="public int get(int) "/>
        <method signature="public java.lang.String getName(int) "/>
        <method signature="public void clearNames() "/>
        <method signature="public void set(int) "/>
        <method signature="public void set(int, java.lang.String) "/>
        <method signature="public android.os.WorkSource[] setReturningDiffs(android.os.WorkSource) "/>
        <method signature="public android.os.WorkSource addReturningNewbs(android.os.WorkSource) "/>
        <method signature="public boolean add(int) "/>
        <method signature="public boolean add(int, java.lang.String) "/>
        <method signature="public android.os.WorkSource addReturningNewbs(int) "/>
        <method signature="public android.os.WorkSource stripNames() "/>
    </class>
    <class name="android.graphics.Paint">
        <method signature="public void setCompatibilityScaling(float) "/>
        <method signature="public int getBidiFlags() "/>
        <method signature="public void setBidiFlags(int) "/>
        <method signature="public int getTextGlyphs(java.lang.String, int, int, int, int, int, char[]) "/>
        <method signature="public float getTextRunAdvances(char[], int, int, int, int, int, float[], int) "/>
        <method signature="public float getTextRunAdvances(java.lang.CharSequence, int, int, int, int, int, float[], int) "/>
        <method signature="public float getTextRunAdvances(java.lang.String, int, int, int, int, int, float[], int) "/>
        <method signature="public int getTextRunCursor(char[], int, int, int, int, int) "/>
        <method signature="public int getTextRunCursor(java.lang.CharSequence, int, int, int, int, int) "/>
        <method signature="public int getTextRunCursor(java.lang.String, int, int, int, int, int) "/>
    </class>
    <class name="android.app.backup.RestoreSession">
        <method signature="public int restoreSome(long, android.app.backup.RestoreObserver, java.lang.String[]) "/>
    </class>
    <class name="android.os.SystemVibrator">
        <method signature="public void vibrate(int, java.lang.String, long) "/>
        <method signature="public void vibrate(int, java.lang.String, long[], int) "/>
    </class>
    <class name="android.print.PrintAttributes.MediaSize">
        <method signature="public static android.print.PrintAttributes.MediaSize getStandardMediaSizeById(java.lang.String) "/>
    </class>
    <class name="android.provider.DocumentsProvider">
        <method signature="public android.database.Cursor queryChildDocumentsForManage(java.lang.String, java.lang.String[], java.lang.String) throws java.io.FileNotFoundException"/>
    </class>
    <class name="android.view.DragEvent">
        <method signature="public static android.view.DragEvent obtain(int, float, float, java.lang.Object, android.content.ClipDescription, android.content.ClipData, boolean) "/>
        <method signature="public static android.view.DragEvent obtain(android.view.DragEvent) "/>
        <method signature="public final void recycle() "/>
    </class>
    <class name="android.os.StrictMode.Span">
        <method signature="public void finish() "/>
    </class>
    <class name="android.view.accessibility.AccessibilityNodeInfo.CollectionInfo">
        <method signature="public static android.view.accessibility.AccessibilityNodeInfo.CollectionInfo obtain(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo) "/>
    </class>
    <class name="android.provider.Telephony.Mms">
        <method signature="public static android.database.Cursor query(android.content.ContentResolver, java.lang.String[]) "/>
        <method signature="public static android.database.Cursor query(android.content.ContentResolver, java.lang.String[], java.lang.String, java.lang.String) "/>
        <method signature="public static java.lang.String extractAddrSpec(java.lang.String) "/>
        <method signature="public static boolean isEmailAddress(java.lang.String) "/>
        <method signature="public static boolean isPhoneNumber(java.lang.String) "/>
    </class>
    <class name="android.widget.GridLayout">
        <method signature="public android.util.Printer getPrinter() "/>
        <method signature="public void setPrinter(android.util.Printer) "/>
        <method signature="protected void onSetLayoutParams(android.view.View, android.view.ViewGroup.LayoutParams) "/>
        <method signature="protected void onDebugDrawMargins(android.graphics.Canvas, android.graphics.Paint) "/>
        <method signature="protected void onDebugDraw(android.graphics.Canvas) "/>
        <method signature="protected void onViewAdded(android.view.View) "/>
        <method signature="protected void onViewRemoved(android.view.View) "/>
        <method signature="protected void onChildVisibilityChanged(android.view.View, int, int) "/>
    </class>
    <class name="android.media.Rating">
        <method signature="public java.lang.String toString() "/>
    </class>
    <class name="android.telephony.gsm.GsmCellLocation">
        <method signature="public void setPsc(int) "/>
        <method signature="public boolean isEmpty() "/>
    </class>
    <class name="android.content.ContentResolver">
        <method signature="public static java.lang.String syncErrorToString(int) "/>
        <method signature="public static int syncErrorStringToInt(java.lang.String) "/>
        <method signature="protected abstract android.content.IContentProvider acquireProvider(android.content.Context, java.lang.String) "/>
        <method signature="protected android.content.IContentProvider acquireExistingProvider(android.content.Context, java.lang.String) "/>
        <method signature="public abstract boolean releaseProvider(android.content.IContentProvider) "/>
        <method signature="protected abstract android.content.IContentProvider acquireUnstableProvider(android.content.Context, java.lang.String) "/>
        <method signature="public abstract boolean releaseUnstableProvider(android.content.IContentProvider) "/>
        <method signature="public abstract void unstableProviderDied(android.content.IContentProvider) "/>
        <method signature="public void appNotRespondingViaProvider(android.content.IContentProvider) "/>
        <method signature="public android.content.ContentResolver.OpenResourceIdResult getResourceId(android.net.Uri) throws java.io.FileNotFoundException"/>
        <method signature="public final android.content.IContentProvider acquireProvider(android.net.Uri) "/>
        <method signature="public final android.content.IContentProvider acquireExistingProvider(android.net.Uri) "/>
        <method signature="public final android.content.IContentProvider acquireProvider(java.lang.String) "/>
        <method signature="public final android.content.IContentProvider acquireUnstableProvider(android.net.Uri) "/>
        <method signature="public final android.content.IContentProvider acquireUnstableProvider(java.lang.String) "/>
        <method signature="public final void registerContentObserver(android.net.Uri, boolean, android.database.ContentObserver, int) "/>
        <method signature="public void notifyChange(android.net.Uri, android.database.ContentObserver, boolean, int) "/>
        <method signature="public static android.content.SyncStatusInfo getSyncStatus(android.accounts.Account, java.lang.String) "/>
        <method signature="public static IContentService getContentService() "/>
        <method signature="public java.lang.String getPackageName() "/>
    </class>
    <class name="android.renderscript.RenderScript">
        <method signature="public static void setupDiskCache(java.io.File) "/>
        <method signature="public static android.renderscript.RenderScript create(android.content.Context, int) "/>
        <method signature="public static android.renderscript.RenderScript create(android.content.Context, int, android.renderscript.RenderScript.ContextType) "/>
    </class>
    <class name="android.webkit.CookieManager">
        <method signature="public java.lang.String getCookie(java.lang.String, boolean) "/>
        <method signature="public synchronized java.lang.String getCookie(android.net.WebAddress) "/>
        <method signature="public synchronized boolean hasCookies(boolean) "/>
        <method signature="protected void flushCookieStore() "/>
        <method signature="protected boolean allowFileSchemeCookiesImpl() "/>
        <method signature="protected void setAcceptFileSchemeCookiesImpl(boolean) "/>
    </class>
    <class name="android.content.res.Resources">
        <method signature="public static int selectDefaultTheme(int, int) "/>
        <method signature="public static int selectSystemTheme(int, int, int, int, int) "/>
        <method signature="public void updateConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo) "/>
        <method signature="public static void updateSystemConfiguration(android.content.res.Configuration, android.util.DisplayMetrics, android.content.res.CompatibilityInfo) "/>
        <method signature="public android.content.res.CompatibilityInfo getCompatibilityInfo() "/>
        <method signature="public void setCompatibilityInfo(android.content.res.CompatibilityInfo) "/>
        <method signature="public static boolean resourceHasPackage(int) "/>
        <method signature="public final void startPreloading() "/>
        <method signature="public LongSparseArray&lt;android.graphics.drawable.Drawable.ConstantState&gt; getPreloadedDrawables() "/>
    </class>
    <class name="android.util.DebugUtils">
        <method signature="public static void buildShortClassTag(java.lang.Object, java.lang.StringBuilder) "/>
    </class>
    <class name="android.media.AsyncPlayer">
        <method signature="public void setUsesWakeLock(android.content.Context) "/>
    </class>
    <class name="android.location.Location">
        <method signature="public boolean isComplete() "/>
        <method signature="public void makeComplete() "/>
        <method signature="public android.location.Location getExtraLocation(java.lang.String) "/>
        <method signature="public void setExtraLocation(java.lang.String, android.location.Location) "/>
        <method signature="public void setIsFromMockProvider(boolean) "/>
    </class>
    <class name="android.provider.CalendarContract.CalendarAlerts">
        <method signature="public static final android.net.Uri insert(android.content.ContentResolver, long, long, long, long, int) "/>
        <method signature="public static final long findNextAlarmTime(android.content.ContentResolver, long) "/>
        <method signature="public static final void rescheduleMissedAlarms(android.content.ContentResolver, android.content.Context, android.app.AlarmManager) "/>
        <method signature="public static void scheduleAlarm(android.content.Context, android.app.AlarmManager, long) "/>
        <method signature="public static final boolean alarmExists(android.content.ContentResolver, long, long, long) "/>
    </class>
    <class name="android.os.Process">
        <method signature="public static final android.os.Process.ProcessStartResult start(java.lang.String, java.lang.String, int, int, int[], int, int, int, java.lang.String, java.lang.String[]) "/>
        <method signature="public static final int myPpid() "/>
        <method signature="public static final boolean isIsolated() "/>
        <method signature="public static final int getUidForPid(int) "/>
        <method signature="public static final int getParentPid(int) "/>
        <method signature="public static final int getThreadGroupLeader(int) "/>
        <method signature="public static final native void setCanSelfBackground(boolean) "/>
        <method signature="public static final native void setThreadGroup(int, int) throws java.lang.IllegalArgumentException, java.lang.SecurityException"/>
        <method signature="public static final native void setProcessGroup(int, int) throws java.lang.IllegalArgumentException, java.lang.SecurityException"/>
        <method signature="public static final native int getProcessGroup(int) throws java.lang.IllegalArgumentException, java.lang.SecurityException"/>
        <method signature="public static final native void setThreadScheduler(int, int, int) throws java.lang.IllegalArgumentException"/>
        <method signature="public static final native boolean setOomAdj(int, int) "/>
        <method signature="public static final native boolean setSwappiness(int, boolean) "/>
        <method signature="public static final native void setArgV0(java.lang.String) "/>
        <method signature="public static final native int setUid(int) "/>
        <method signature="public static final native int setGid(int) "/>
        <method signature="public static final void killProcessQuiet(int) "/>
        <method signature="public static final native void sendSignalQuiet(int, int) "/>
        <method signature="public static final native long getFreeMemory() "/>
        <method signature="public static final native long getTotalMemory() "/>
        <method signature="public static final native void readProcLines(java.lang.String, java.lang.String[], long[]) "/>
        <method signature="public static final native int[] getPids(java.lang.String, int[]) "/>
        <method signature="public static final native boolean readProcFile(java.lang.String, int[], java.lang.String[], long[], float[]) "/>
        <method signature="public static final native boolean parseProcLine(byte[], int, int, int[], java.lang.String[], long[], float[]) "/>
        <method signature="public static final native int[] getPidsForCommands(java.lang.String[]) "/>
        <method signature="public static final native long getPss(int) "/>
    </class>
    <class name="android.net.sip.SipProfile">
        <method signature="public SipURI getUri() "/>
        <method signature="public Address getSipAddress() "/>
        <method signature="public void setCallingUid(int) "/>
        <method signature="public int getCallingUid() "/>
    </class>
    <class name="android.content.IntentFilter">
        <method signature="public final void addDataSchemeSpecificPart(android.os.PatternMatcher) "/>
        <method signature="public final void addDataAuthority(android.content.IntentFilter.AuthorityEntry) "/>
        <method signature="public final void addDataPath(android.os.PatternMatcher) "/>
        <method signature="public boolean debugCheck() "/>
    </class>
    <class name="android.media.audiofx.Visualizer.OnServerDiedListener">
        <method signature="public abstract void onServerDied() "/>
    </class>
    <class name="com.android.internal.telephony.SmsUsageMonitor">
        <method signature="public static int mergeShortCodeCategories(int, int) "/>
    </class>
    <class name="android.provider.Telephony.Threads">
        <method signature="public static long getOrCreateThreadId(android.content.Context, java.lang.String) "/>
        <method signature="public static long getOrCreateThreadId(android.content.Context, Set&lt;java.lang.String&gt;) "/>
    </class>
    <class name="android.content.pm.ApplicationInfo">
        <method signature="public boolean hasRtlSupport() "/>
        <method signature="public void disableCompatibilityMode() "/>
        <method signature="protected android.graphics.drawable.Drawable loadDefaultIcon(android.content.pm.PackageManager) "/>
        <method signature="protected android.content.pm.ApplicationInfo getApplicationInfo() "/>
    </class>
    <class name="com.android.vcard.VCardEntry.NameData">
        <method signature="public void setFamily(java.lang.String) "/>
        <method signature="public void setMiddle(java.lang.String) "/>
        <method signature="public void setGiven(java.lang.String) "/>
        <method signature="public void setPrefix(java.lang.String) "/>
        <method signature="public void setSuffix(java.lang.String) "/>
    </class>
    <class name="android.net.wifi.p2p.nsd.WifiP2pServiceInfo">
        <method signature="public List&lt;java.lang.String&gt; getSupplicantQueryList() "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.content.pm.PackageManager">
        <method signature="public abstract int getPackageUid(java.lang.String, int) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public abstract List&lt;android.content.pm.PackageInfo&gt; getInstalledPackages(int, int) "/>
        <method signature="public transient android.content.Intent buildPermissionRequestIntent(java.lang.String[]) "/>
        <method signature="public abstract void grantPermission(java.lang.String, java.lang.String) "/>
        <method signature="public abstract void revokePermission(java.lang.String, java.lang.String) "/>
        <method signature="public abstract int getUidForSharedUser(java.lang.String) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public abstract android.content.pm.ResolveInfo resolveActivityAsUser(android.content.Intent, int, int) "/>
        <method signature="public abstract List&lt;android.content.pm.ResolveInfo&gt; queryIntentActivitiesAsUser(android.content.Intent, int, int) "/>
        <method signature="public abstract List&lt;android.content.pm.ResolveInfo&gt; queryBroadcastReceivers(android.content.Intent, int, int) "/>
        <method signature="public abstract List&lt;android.content.pm.ResolveInfo&gt; queryIntentServicesAsUser(android.content.Intent, int, int) "/>
        <method signature="public abstract List&lt;android.content.pm.ResolveInfo&gt; queryIntentContentProvidersAsUser(android.content.Intent, int, int) "/>
        <method signature="public abstract android.content.res.Resources getResourcesForApplicationAsUser(java.lang.String, int) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public abstract void installPackage(android.net.Uri, IPackageInstallObserver, int, java.lang.String) "/>
        <method signature="public abstract void installPackageWithVerification(android.net.Uri, IPackageInstallObserver, int, java.lang.String, android.net.Uri, android.content.pm.ManifestDigest, android.content.pm.ContainerEncryptionParams) "/>
        <method signature="public abstract void installPackageWithVerificationAndEncryption(android.net.Uri, IPackageInstallObserver, int, java.lang.String, android.content.pm.VerificationParams, android.content.pm.ContainerEncryptionParams) "/>
        <method signature="public abstract int installExistingPackage(java.lang.String) throws android.content.pm.PackageManager.NameNotFoundException"/>
        <method signature="public abstract void deletePackage(java.lang.String, IPackageDeleteObserver, int) "/>
        <method signature="public abstract void clearApplicationUserData(java.lang.String, IPackageDataObserver) "/>
        <method signature="public abstract void deleteApplicationCacheFiles(java.lang.String, IPackageDataObserver) "/>
        <method signature="public abstract void freeStorageAndNotify(long, IPackageDataObserver) "/>
        <method signature="public abstract void freeStorage(long, android.content.IntentSender) "/>
        <method signature="public abstract void getPackageSizeInfo(java.lang.String, int, IPackageStatsObserver) "/>
        <method signature="public void getPackageSizeInfo(java.lang.String, IPackageStatsObserver) "/>
        <method signature="public void addPreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName, int) "/>
        <method signature="public abstract void replacePreferredActivity(android.content.IntentFilter, int, android.content.ComponentName[], android.content.ComponentName) "/>
        <method signature="public abstract android.content.ComponentName getHomeActivities(List&lt;android.content.pm.ResolveInfo&gt;) "/>
        <method signature="public abstract boolean setApplicationBlockedSettingAsUser(java.lang.String, boolean, android.os.UserHandle) "/>
        <method signature="public abstract boolean getApplicationBlockedSettingAsUser(java.lang.String, android.os.UserHandle) "/>
        <method signature="public abstract void movePackage(java.lang.String, IPackageMoveObserver, int) "/>
        <method signature="public abstract android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity() "/>
        <method signature="public static java.lang.String getDataDirForUser(int, java.lang.String) "/>
    </class>
    <class name="java.lang.reflect.Modifier">
        <method signature="public static boolean isConstructor(int) "/>
    </class>
    <class name="android.app.backup.BackupAgentHelper">
        <method signature="public android.app.backup.BackupHelperDispatcher getDispatcher() "/>
    </class>
    <class name="android.content.ComponentName">
        <method signature="public void appendShortString(java.lang.StringBuilder) "/>
        <method signature="public static void appendShortString(java.lang.StringBuilder, java.lang.String, java.lang.String) "/>
        <method signature="public static void printShortString(java.io.PrintWriter, java.lang.String, java.lang.String) "/>
    </class>
    <class name="android.security.KeyStoreParameter">
        <method signature="public int getFlags() "/>
    </class>
    <class name="android.media.ExifInterface">
        <method signature="public long[] getThumbnailRange() "/>
        <method signature="public long getDateTime() "/>
        <method signature="public long getGpsDateTime() "/>
    </class>
    <class name="android.view.ContextThemeWrapper">
        <method signature="public int getThemeResId() "/>
    </class>
    <class name="android.webkit.JsPromptResult">
        <method signature="public java.lang.String getStringResult() "/>
    </class>
    <class name="android.app.PendingIntent">
        <method signature="public static android.app.PendingIntent getActivityAsUser(android.content.Context, int, android.content.Intent, int, android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public static android.app.PendingIntent getActivitiesAsUser(android.content.Context, int, android.content.Intent[], int, android.os.Bundle, android.os.UserHandle) "/>
        <method signature="public static android.app.PendingIntent getBroadcastAsUser(android.content.Context, int, android.content.Intent, int, android.os.UserHandle) "/>
        <method signature="public boolean isTargetedToPackage() "/>
        <method signature="public boolean isActivity() "/>
        <method signature="public android.content.Intent getIntent() "/>
        <method signature="public IIntentSender getTarget() "/>
    </class>
    <class name="java.lang.reflect.Field">
        <method signature="public int getDexFieldIndex() "/>
    </class>
    <class name="android.net.wifi.p2p.WifiP2pManager">
        <method signature="public void listen(android.net.wifi.p2p.WifiP2pManager.Channel, boolean, android.net.wifi.p2p.WifiP2pManager.ActionListener) "/>
        <method signature="public void setWifiP2pChannels(android.net.wifi.p2p.WifiP2pManager.Channel, int, int, android.net.wifi.p2p.WifiP2pManager.ActionListener) "/>
        <method signature="public void startWps(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.WpsInfo, android.net.wifi.p2p.WifiP2pManager.ActionListener) "/>
        <method signature="public void setDeviceName(android.net.wifi.p2p.WifiP2pManager.Channel, java.lang.String, android.net.wifi.p2p.WifiP2pManager.ActionListener) "/>
        <method signature="public void setWFDInfo(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pWfdInfo, android.net.wifi.p2p.WifiP2pManager.ActionListener) "/>
        <method signature="public void deletePersistentGroup(android.net.wifi.p2p.WifiP2pManager.Channel, int, android.net.wifi.p2p.WifiP2pManager.ActionListener) "/>
        <method signature="public void requestPersistentGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel, android.net.wifi.p2p.WifiP2pManager.PersistentGroupInfoListener) "/>
        <method signature="public void setMiracastMode(int) "/>
        <method signature="public android.os.Messenger getMessenger() "/>
    </class>
    <class name="android.location.LocationRequest">
        <method signature="public static android.location.LocationRequest createFromDeprecatedProvider(java.lang.String, long, float, boolean) "/>
        <method signature="public static android.location.LocationRequest createFromDeprecatedCriteria(android.location.Criteria, long, float, boolean) "/>
        <method signature="public void decrementNumUpdates() "/>
        <method signature="public android.location.LocationRequest setProvider(java.lang.String) "/>
        <method signature="public java.lang.String getProvider() "/>
        <method signature="public android.location.LocationRequest setSmallestDisplacement(float) "/>
        <method signature="public float getSmallestDisplacement() "/>
        <method signature="public void setWorkSource(android.os.WorkSource) "/>
        <method signature="public android.os.WorkSource getWorkSource() "/>
        <method signature="public void setHideFromAppOps(boolean) "/>
        <method signature="public boolean getHideFromAppOps() "/>
        <method signature="public static java.lang.String qualityToString(int) "/>
    </class>
    <class name="android.app.Fragment">
        <method signature="public android.view.LayoutInflater getLayoutInflater(android.os.Bundle) "/>
    </class>
    <class name="android.view.textservice.SpellCheckerSession">
        <method signature="public ITextServicesSessionListener getTextServicesSessionListener() "/>
        <method signature="public ISpellCheckerSessionListener getSpellCheckerSessionListener() "/>
    </class>
    <class name="android.os.ServiceManager">
        <method signature="public static void initServiceCache(Map&lt;java.lang.String,android.os.IBinder&gt;) "/>
    </class>
    <class name="android.preference.PreferenceFragment">
        <method signature="public android.widget.ListView getListView() "/>
    </class>
    <class name="android.view.KeyEvent">
        <method signature="public static android.view.KeyEvent obtain(long, long, int, int, int, int, int, int, int, int, java.lang.String) "/>
        <method signature="public static android.view.KeyEvent obtain(android.view.KeyEvent) "/>
        <method signature="public android.view.KeyEvent copy() "/>
        <method signature="public final void recycle() "/>
        <method signature="public final void recycleIfNeededAfterDispatch() "/>
        <method signature="public final boolean isTainted() "/>
        <method signature="public final void setTainted(boolean) "/>
        <method signature="public final boolean isDown() "/>
        <method signature="public final boolean hasDefaultAction() "/>
        <method signature="public static final boolean isConfirmKey(int) "/>
        <method signature="public final long getEventTimeNano() "/>
        <method signature="public final int getKeyboardDevice() "/>
        <method signature="public static java.lang.String actionToString(int) "/>
        <method signature="public static java.lang.String metaStateToString(int) "/>
        <method signature="public static android.view.KeyEvent createFromParcelBody(android.os.Parcel) "/>
    </class>
    <class name="com.android.uiautomator.core.UiDevice">
        <method signature="public void initialize(com.android.uiautomator.core.UiAutomatorBridge) "/>
    </class>
    <class name="android.net.http.SslError">
        <method signature="public static android.net.http.SslError SslErrorFromChromiumErrorCode(int, android.net.http.SslCertificate, java.lang.String) "/>
    </class>
    <class name="android.content.ClipData.Item">
        <method signature="public void toShortString(java.lang.StringBuilder) "/>
    </class>
    <class name="android.widget.AutoCompleteTextView">
        <method signature="public void setDropDownAnimationStyle(int) "/>
        <method signature="public int getDropDownAnimationStyle() "/>
        <method signature="public boolean isDropDownAlwaysVisible() "/>
        <method signature="public void setDropDownAlwaysVisible(boolean) "/>
        <method signature="public boolean isDropDownDismissedOnCompletion() "/>
        <method signature="public void setDropDownDismissedOnCompletion(boolean) "/>
        <method signature="public void showDropDownAfterLayout() "/>
        <method signature="public void ensureImeVisible(boolean) "/>
        <method signature="public boolean isInputMethodNotNeeded() "/>
        <method signature="public void setForceIgnoreOutsideTouch(boolean) "/>
    </class>
    <class name="android.media.audiofx.Visualizer">
        <method signature="public int setServerDiedListener(android.media.audiofx.Visualizer.OnServerDiedListener) "/>
    </class>
    <class name="java.net.DatagramSocket">
        <method signature="public void setNetworkInterface(java.net.NetworkInterface) throws java.net.SocketException"/>
        <method signature="public final java.io.FileDescriptor getFileDescriptor$() "/>
    </class>
    <class name="android.graphics.drawable.Drawable">
        <method signature="public int getLayoutDirection() "/>
        <method signature="public void setLayoutDirection(int) "/>
        <method signature="public void setXfermode(android.graphics.Xfermode) "/>
        <method signature="public android.graphics.Insets getOpticalInsets() "/>
    </class>
    <class name="android.app.DownloadManager.Query">
        <method signature="public android.app.DownloadManager.Query setOnlyIncludeVisibleInDownloadsUi(boolean) "/>
        <method signature="public android.app.DownloadManager.Query orderBy(java.lang.String, int) "/>
    </class>
    <class name="android.telephony.SmsMessage">
        <method signature="public static android.telephony.SmsMessage createFromPdu(byte[], java.lang.String) "/>
        <method signature="public static android.telephony.SmsMessage newFromCMT(java.lang.String[]) "/>
        <method signature="public static android.telephony.SmsMessage newFromParcel(android.os.Parcel) "/>
        <method signature="public static android.telephony.SmsMessage createFromEfRecord(int, byte[]) "/>
        <method signature="public static ArrayList&lt;java.lang.String&gt; fragmentText(java.lang.String) "/>
    </class>
    <class name="com.android.uiautomator.core.UiScrollable">
        <method signature="public boolean ensureFullyVisible(com.android.uiautomator.core.UiObject) throws com.android.uiautomator.core.UiObjectNotFoundException"/>
    </class>
    <class name="android.nfc.NfcAdapter">
        <method signature="public static synchronized android.nfc.NfcAdapter getNfcAdapter(android.content.Context) "/>
        <method signature="public static android.nfc.NfcAdapter getDefaultAdapter() "/>
        <method signature="public android.content.Context getContext() "/>
        <method signature="public INfcAdapter getService() "/>
        <method signature="public INfcTag getTagService() "/>
        <method signature="public INfcCardEmulation getCardEmulationService() "/>
        <method signature="public void attemptDeadServiceRecovery(java.lang.Exception) "/>
        <method signature="public int getAdapterState() "/>
        <method signature="public boolean enable() "/>
        <method signature="public boolean disable() "/>
        <method signature="public void setNdefPushMessage(android.nfc.NdefMessage, android.app.Activity, int) "/>
        <method signature="public void setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback, android.app.Activity, int) "/>
        <method signature="public boolean enableNdefPush() "/>
        <method signature="public boolean disableNdefPush() "/>
        <method signature="public void dispatch(android.nfc.Tag) "/>
        <method signature="public void setP2pModes(int, int) "/>
        <method signature="public INfcAdapterExtras getNfcAdapterExtrasInterface() "/>
    </class>
    <class name="com.android.internal.telephony.cdma.SmsMessage">
        <method signature="public static com.android.internal.telephony.cdma.SmsMessage createFromEfRecord(int, byte[]) "/>
        <method signature="public static com.android.internal.telephony.cdma.SmsMessage.SubmitPdu getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, com.android.internal.telephony.SmsHeader) "/>
    </class>
    <class name="android.provider.Telephony.Sms.Inbox">
        <method signature="public static android.net.Uri addMessage(android.content.ContentResolver, java.lang.String, java.lang.String, java.lang.String, java.lang.Long, boolean) "/>
    </class>
    <class name="android.widget.OverScroller">
        <method signature="public final int getDuration() "/>
        <method signature="public void extendDuration(int) "/>
        <method signature="public void setFinalX(int) "/>
        <method signature="public void setFinalY(int) "/>
        <method signature="public int timePassed() "/>
        <method signature="public boolean isScrollingInDirection(float, float) "/>
    </class>
    <class name="android.widget.PopupMenu">
        <method signature="public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem) "/>
        <method signature="public void onCloseMenu(com.android.internal.view.menu.MenuBuilder, boolean) "/>
        <method signature="public boolean onOpenSubMenu(com.android.internal.view.menu.MenuBuilder) "/>
        <method signature="public void onCloseSubMenu(com.android.internal.view.menu.SubMenuBuilder) "/>
        <method signature="public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder) "/>
    </class>
    <class name="android.view.ViewGroup">
        <method signature="public android.view.View findViewByAccessibilityIdTraversal(int) "/>
        <method signature="public void makeOptionalFitsSystemWindows() "/>
        <method signature="protected void onChildVisibilityChanged(android.view.View, int, int) "/>
        <method signature="protected boolean hasHoveredChild() "/>
        <method signature="protected boolean isTransformedTouchPointInView(float, float, android.view.View, android.graphics.PointF) "/>
        <method signature="public void dispatchStartTemporaryDetach() "/>
        <method signature="public void dispatchFinishTemporaryDetach() "/>
        <method signature="protected void internalSetPadding(int, int, int, int) "/>
        <method signature="protected void onDebugDrawMargins(android.graphics.Canvas, android.graphics.Paint) "/>
        <method signature="protected void onDebugDraw(android.graphics.Canvas) "/>
        <method signature="protected void dispatchGetDisplayList() "/>
        <method signature="protected android.view.View findViewTraversal(int) "/>
        <method signature="protected android.view.View findViewWithTagTraversal(java.lang.Object) "/>
        <method signature="protected android.view.View findViewByPredicateTraversal(Predicate&lt;android.view.View&gt;, android.view.View) "/>
        <method signature="protected void onViewAdded(android.view.View) "/>
        <method signature="protected void onViewRemoved(android.view.View) "/>
        <method signature="public void invalidateChildFast(android.view.View, android.graphics.Rect) "/>
        <method signature="protected android.view.ViewParent invalidateChildInParentFast(int, int, android.graphics.Rect) "/>
        <method signature="public void offsetChildrenTopAndBottom(int) "/>
        <method signature="public void suppressLayout(boolean) "/>
        <method signature="public boolean isLayoutSuppressed() "/>
        <method signature="public void requestTransitionStart(android.animation.LayoutTransition) "/>
        <method signature="public boolean resolveRtlPropertiesIfNeeded() "/>
        <method signature="public boolean resolveLayoutDirection() "/>
        <method signature="public boolean resolveTextDirection() "/>
        <method signature="public boolean resolveTextAlignment() "/>
        <method signature="public void resolvePadding() "/>
        <method signature="protected void resolveDrawables() "/>
        <method signature="public void resolveLayoutParams() "/>
        <method signature="public void resetResolvedLayoutDirection() "/>
        <method signature="public void resetResolvedTextDirection() "/>
        <method signature="public void resetResolvedTextAlignment() "/>
        <method signature="public void resetResolvedPadding() "/>
        <method signature="protected void resetResolvedDrawables() "/>
        <method signature="protected void onSetLayoutParams(android.view.View, android.view.ViewGroup.LayoutParams) "/>
    </class>
    <class name="android.net.wifi.WifiSsid">
        <method signature="public byte[] getOctets() "/>
        <method signature="public java.lang.String getHexString() "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.webkit.Plugin">
        <method signature="public java.lang.String toString() "/>
        <method signature="public java.lang.String getName() "/>
        <method signature="public java.lang.String getPath() "/>
        <method signature="public java.lang.String getFileName() "/>
        <method signature="public java.lang.String getDescription() "/>
        <method signature="public void setName(java.lang.String) "/>
        <method signature="public void setPath(java.lang.String) "/>
        <method signature="public void setFileName(java.lang.String) "/>
        <method signature="public void setDescription(java.lang.String) "/>
        <method signature="public void setClickHandler(android.webkit.Plugin.PreferencesClickHandler) "/>
        <method signature="public void dispatchClickEvent(android.content.Context) "/>
    </class>
    <class name="android.webkit.WebViewFactory">
        <method signature="public static void setUseExperimentalWebView(boolean) "/>
        <method signature="public static boolean useExperimentalWebView() "/>
        <method signature="public static boolean isUseExperimentalWebViewSet() "/>
    </class>
    <class name="android.telephony.CellInfoCdma">
        <method signature="public void setCellIdentity(android.telephony.CellIdentityCdma) "/>
        <method signature="public void setCellSignalStrength(android.telephony.CellSignalStrengthCdma) "/>
        <method signature="protected static android.telephony.CellInfoCdma createFromParcelBody(android.os.Parcel) "/>
    </class>
    <class name="android.view.inputmethod.InputMethodManager">
        <method signature="public static android.view.inputmethod.InputMethodManager getInstance() "/>
        <method signature="public static android.view.inputmethod.InputMethodManager peekInstance() "/>
        <method signature="public IInputMethodClient getClient() "/>
        <method signature="public IInputContext getInputContext() "/>
        <method signature="public void setImeWindowStatus(android.os.IBinder, int, int) "/>
        <method signature="public void setFullscreenMode(boolean) "/>
        <method signature="public void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[]) "/>
        <method signature="public void notifySuggestionPicked(android.text.style.SuggestionSpan, java.lang.String, int) "/>
        <method signature="public void reportFinishInputConnection(android.view.inputmethod.InputConnection) "/>
        <method signature="public void showSoftInputUnchecked(int, android.os.ResultReceiver) "/>
        <method signature="public void windowDismissed(android.os.IBinder) "/>
        <method signature="public void focusIn(android.view.View) "/>
        <method signature="public void focusOut(android.view.View) "/>
        <method signature="public void checkFocus() "/>
        <method signature="public void onWindowFocus(android.view.View, android.view.View, int, boolean, int) "/>
        <method signature="public void startGettingWindowFocus(android.view.View) "/>
        <method signature="public int dispatchInputEvent(android.view.InputEvent, java.lang.Object, android.view.inputmethod.InputMethodManager.FinishedInputEventCallback, android.os.Handler) "/>
    </class>
    <class name="android.util.AtomicFile">
        <method signature="public void truncate() throws java.io.IOException"/>
        <method signature="public java.io.FileOutputStream openAppend() throws java.io.IOException"/>
    </class>
    <class name="android.media.AudioManager">
        <method signature="public void preDispatchKeyEvent(android.view.KeyEvent, int) "/>
        <method signature="public void handleKeyDown(android.view.KeyEvent, int) "/>
        <method signature="public void handleKeyUp(android.view.KeyEvent, int) "/>
        <method signature="public void adjustMasterVolume(int, int) "/>
        <method signature="public static boolean isValidRingerMode(int) "/>
        <method signature="public int getLastAudibleStreamVolume(int) "/>
        <method signature="public int getMasterStreamType() "/>
        <method signature="public int getMasterMaxVolume() "/>
        <method signature="public int getMasterVolume() "/>
        <method signature="public int getLastAudibleMasterVolume() "/>
        <method signature="public void setMasterVolume(int, int) "/>
        <method signature="public boolean isStreamMute(int) "/>
        <method signature="public void setMasterMute(boolean) "/>
        <method signature="public void setMasterMute(boolean, int) "/>
        <method signature="public boolean isMasterMute() "/>
        <method signature="public void forceVolumeControlStream(int) "/>
        <method signature="public boolean isMusicActiveRemotely() "/>
        <method signature="public boolean isLocalOrRemoteMusicActive() "/>
        <method signature="public boolean isAudioFocusExclusive() "/>
        <method signature="public void adjustLocalOrRemoteStreamVolume(int, int) "/>
        <method signature="public void setParameter(java.lang.String, java.lang.String) "/>
        <method signature="public void registerAudioFocusListener(android.media.AudioManager.OnAudioFocusChangeListener) "/>
        <method signature="public void unregisterAudioFocusListener(android.media.AudioManager.OnAudioFocusChangeListener) "/>
        <method signature="public void requestAudioFocusForCall(int, int) "/>
        <method signature="public void abandonAudioFocusForCall() "/>
        <method signature="public void registerMediaButtonIntent(android.app.PendingIntent, android.content.ComponentName) "/>
        <method signature="public void registerMediaButtonEventReceiverForCalls(android.content.ComponentName) "/>
        <method signature="public void unregisterMediaButtonEventReceiverForCalls() "/>
        <method signature="public void unregisterMediaButtonIntent(android.app.PendingIntent) "/>
        <method signature="public void registerRemoteControlDisplay(IRemoteControlDisplay) "/>
        <method signature="public void registerRemoteControlDisplay(IRemoteControlDisplay, int, int) "/>
        <method signature="public void unregisterRemoteControlDisplay(IRemoteControlDisplay) "/>
        <method signature="public void remoteControlDisplayUsesBitmapSize(IRemoteControlDisplay, int, int) "/>
        <method signature="public void remoteControlDisplayWantsPlaybackPositionSync(IRemoteControlDisplay, boolean) "/>
        <method signature="public void setRemoteControlClientPlaybackPosition(int, long) "/>
        <method signature="public void updateRemoteControlClientMetadata(int, int, android.media.Rating) "/>
        <method signature="public void reloadAudioSettings() "/>
        <method signature="public void avrcpSupportsAbsoluteVolume(java.lang.String, boolean) "/>
        <method signature="public boolean isSilentMode() "/>
        <method signature="public int getDevicesForStream(int) "/>
        <method signature="public void setWiredDeviceConnectionState(int, int, java.lang.String) "/>
        <method signature="public int setBluetoothA2dpDeviceConnectionState(android.bluetooth.BluetoothDevice, int) "/>
        <method signature="public IRingtonePlayer getRingtonePlayer() "/>
        <method signature="public int getOutputLatency(int) "/>
    </class>
    <class name="java.util.concurrent.ForkJoinTask">
        <method signature="public static Collection&lt;T&gt; invokeAll(Collection&lt;T&gt;) "/>
        <method signature="public final void quietlyComplete() "/>
        <method signature="public final short getForkJoinTaskTag() "/>
        <method signature="public final short setForkJoinTaskTag(short) "/>
        <method signature="public final boolean compareAndSetForkJoinTaskTag(short, short) "/>
    </class>
    <class name="android.content.SyncRequest.Builder">
        <method signature="public android.content.SyncRequest.Builder setTransferSize(long, long) "/>
        <method signature="public android.content.SyncRequest.Builder setPriority(int) "/>
    </class>
    <class name="android.net.NetworkInfo">
        <method signature="public void setIsAvailable(boolean) "/>
        <method signature="public void setFailover(boolean) "/>
        <method signature="public void setRoaming(boolean) "/>
        <method signature="public boolean isConnectedToProvisioningNetwork() "/>
        <method signature="public void setIsConnectedToProvisioningNetwork(boolean) "/>
        <method signature="public void setDetailedState(android.net.NetworkInfo.DetailedState, java.lang.String, java.lang.String) "/>
        <method signature="public void setExtraInfo(java.lang.String) "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.telephony.PhoneNumberUtils">
        <method signature="public static java.lang.String extractNetworkPortionAlt(java.lang.String) "/>
        <method signature="public static java.lang.String convertAndStrip(java.lang.String) "/>
        <method signature="public static java.lang.String convertPreDial(java.lang.String) "/>
        <method signature="public static boolean compare(java.lang.String, java.lang.String, boolean) "/>
        <method signature="public static boolean compareLoosely(java.lang.String, java.lang.String) "/>
        <method signature="public static boolean compareStrictly(java.lang.String, java.lang.String) "/>
        <method signature="public static boolean compareStrictly(java.lang.String, java.lang.String, boolean) "/>
        <method signature="public static java.lang.String formatNumber(java.lang.String, int) "/>
        <method signature="public static java.lang.String formatNumberToE164(java.lang.String, java.lang.String) "/>
        <method signature="public static java.lang.String formatNumber(java.lang.String, java.lang.String) "/>
        <method signature="public static java.lang.String formatNumber(java.lang.String, java.lang.String, java.lang.String) "/>
        <method signature="public static java.lang.String normalizeNumber(java.lang.String) "/>
        <method signature="public static java.lang.String replaceUnicodeDigits(java.lang.String) "/>
        <method signature="public static boolean isPotentialEmergencyNumber(java.lang.String) "/>
        <method signature="public static boolean isEmergencyNumber(java.lang.String, java.lang.String) "/>
        <method signature="public static boolean isPotentialEmergencyNumber(java.lang.String, java.lang.String) "/>
        <method signature="public static boolean isLocalEmergencyNumber(java.lang.String, android.content.Context) "/>
        <method signature="public static boolean isPotentialLocalEmergencyNumber(java.lang.String, android.content.Context) "/>
        <method signature="public static boolean isVoiceMailNumber(java.lang.String) "/>
        <method signature="public static java.lang.String cdmaCheckAndProcessPlusCode(java.lang.String) "/>
        <method signature="public static java.lang.String cdmaCheckAndProcessPlusCodeForSms(java.lang.String) "/>
        <method signature="public static java.lang.String cdmaCheckAndProcessPlusCodeByNumberFormat(java.lang.String, int, int) "/>
        <method signature="public static boolean isUriNumber(java.lang.String) "/>
        <method signature="public static java.lang.String getUsernameFromUriNumber(java.lang.String) "/>
    </class>
    <class name="android.telephony.TelephonyManager">
        <method signature="public static android.telephony.TelephonyManager getDefault() "/>
        <method signature="public static android.telephony.TelephonyManager from(android.content.Context) "/>
        <method signature="public void enableLocationUpdates() "/>
        <method signature="public void disableLocationUpdates() "/>
        <method signature="public int getCurrentPhoneType() "/>
        <method signature="public static int getPhoneType(int) "/>
        <method signature="public static int getLteOnCdmaModeStatic() "/>
        <method signature="public int getDataNetworkType() "/>
        <method signature="public int getVoiceNetworkType() "/>
        <method signature="public static int getNetworkClass(int) "/>
        <method signature="public java.lang.String getNetworkTypeName() "/>
        <method signature="public static java.lang.String getNetworkTypeName(int) "/>
        <method signature="public int getLteOnCdmaMode() "/>
        <method signature="public java.lang.String getLine1AlphaTag() "/>
        <method signature="public java.lang.String getMsisdn() "/>
        <method signature="public java.lang.String getCompleteVoiceMailNumber() "/>
        <method signature="public int getVoiceMessageCount() "/>
        <method signature="public java.lang.String getIsimImpi() "/>
        <method signature="public java.lang.String getIsimDomain() "/>
        <method signature="public java.lang.String[] getIsimImpu() "/>
        <method signature="public int getCdmaEriIconIndex() "/>
        <method signature="public int getCdmaEriIconMode() "/>
        <method signature="public java.lang.String getCdmaEriText() "/>
        <method signature="public boolean isVoiceCapable() "/>
        <method signature="public boolean isSmsCapable() "/>
        <method signature="public void setCellInfoListRate(int) "/>
    </class>
    <class name="android.widget.ImageView">
        <method signature="public final void setXfermode(android.graphics.Xfermode) "/>
    </class>
    <class name="android.view.WindowId">
        <method signature="public IWindowId getTarget() "/>
    </class>
    <class name="android.telephony.cdma.CdmaCellLocation">
        <method signature="public boolean isEmpty() "/>
    </class>
    <class name="android.location.LocationManager">
        <method signature="public void requestLocationUpdates(android.location.LocationRequest, android.location.LocationListener, android.os.Looper) "/>
        <method signature="public void requestLocationUpdates(android.location.LocationRequest, android.app.PendingIntent) "/>
        <method signature="public void addGeofence(android.location.LocationRequest, android.location.Geofence, android.app.PendingIntent) "/>
        <method signature="public void removeGeofence(android.location.Geofence, android.app.PendingIntent) "/>
        <method signature="public void removeAllGeofences(android.app.PendingIntent) "/>
        <method signature="public android.location.Location getLastLocation() "/>
        <method signature="public boolean sendNiResponse(int, int) "/>
    </class>
    <class name="android.print.PrinterInfo">
        <method signature="public void copyFrom(android.print.PrinterInfo) "/>
    </class>
    <class name="new IBluetoothGattServerCallback.Stub(){}">
        <method signature="public void onServerRegistered(int, int) "/>
        <method signature="public void onScanResult(java.lang.String, int, byte[]) "/>
        <method signature="public void onServerConnectionState(int, int, boolean, java.lang.String) "/>
        <method signature="public void onServiceAdded(int, int, int, android.os.ParcelUuid) "/>
        <method signature="public void onCharacteristicReadRequest(java.lang.String, int, int, boolean, int, int, android.os.ParcelUuid, int, android.os.ParcelUuid) "/>
        <method signature="public void onDescriptorReadRequest(java.lang.String, int, int, boolean, int, int, android.os.ParcelUuid, int, android.os.ParcelUuid, android.os.ParcelUuid) "/>
        <method signature="public void onCharacteristicWriteRequest(java.lang.String, int, int, int, boolean, boolean, int, int, android.os.ParcelUuid, int, android.os.ParcelUuid, byte[]) "/>
        <method signature="public void onDescriptorWriteRequest(java.lang.String, int, int, int, boolean, boolean, int, int, android.os.ParcelUuid, int, android.os.ParcelUuid, android.os.ParcelUuid, byte[]) "/>
        <method signature="public void onExecuteWrite(java.lang.String, int, boolean) "/>
    </class>
    <class name="android.net.wifi.WifiInfo">
        <method signature="public android.net.wifi.WifiSsid getWifiSsid() "/>
        <method signature="public void setMeteredHint(boolean) "/>
        <method signature="public boolean getMeteredHint() "/>
        <method signature="public void setHiddenSSID(boolean) "/>
        <method signature="public static java.lang.String removeDoubleQuotes(java.lang.String) "/>
        <method signature="public int describeContents() "/>
        <method signature="public void writeToParcel(android.os.Parcel, int) "/>
    </class>
    <class name="android.bluetooth.BluetoothHealth">
        <method signature="public boolean registerAppConfiguration(java.lang.String, int, int, int, android.bluetooth.BluetoothHealthCallback) "/>
        <method signature="public boolean connectChannelToSink(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothHealthAppConfiguration, int) "/>
    </class>
    <class name="android.view.inputmethod.InputMethodSubtype">
        <method signature="public static List&lt;android.view.inputmethod.InputMethodSubtype&gt; sort(android.content.Context, int, android.view.inputmethod.InputMethodInfo, List&lt;android.view.inputmethod.InputMethodSubtype&gt;) "/>
    </class>
    <class name="java.net.URI">
        <method signature="public int getEffectivePort() "/>
        <method signature="public static int getEffectivePort(java.lang.String, int) "/>
    </class>
    <class name="android.support.v8.renderscript.RenderScript">
        <method signature="public static void setupDiskCache(java.io.File) "/>
        <method signature="public void sendMessage(int, int[]) "/>
        <method signature="public static android.support.v8.renderscript.RenderScript create(android.content.Context, int) "/>
        <method signature="public static android.support.v8.renderscript.RenderScript create(android.content.Context, int, android.support.v8.renderscript.RenderScript.ContextType) "/>
        <method signature="public static android.support.v8.renderscript.RenderScript create(android.content.Context, android.support.v8.renderscript.RenderScript.ContextType) "/>
    </class>
    <class name="android.support.v8.renderscript.Type">
        <method signature="public int getYuv() "/>
    </class>
    <class name="android.test.mock.MockContentProvider">
        <method signature="public android.os.Bundle call(java.lang.String, java.lang.String, android.os.Bundle) "/>
        <method signature="public final android.content.IContentProvider getIContentProvider() "/>
    </class>
    <class name="android.graphics.drawable.NinePatchDrawable">
        <method signature="public android.graphics.Insets getOpticalInsets() "/>
    </class>
    <class name="android.net.ConnectivityManager">
        <method signature="public static java.lang.String getNetworkTypeName(int) "/>
        <method signature="public static boolean isNetworkTypeMobile(int) "/>
        <method signature="public static boolean isNetworkTypeWifi(int) "/>
        <method signature="public static boolean isNetworkTypeExempt(int) "/>
        <method signature="public android.net.NetworkInfo getActiveNetworkInfoForUid(int) "/>
        <method signature="public android.net.NetworkInfo getProvisioningOrActiveNetworkInfo() "/>
        <method signature="public android.net.LinkProperties getActiveLinkProperties() "/>
        <method signature="public android.net.LinkProperties getLinkProperties(int) "/>
        <method signature="public boolean setRadios(boolean) "/>
        <method signature="public boolean setRadio(int, boolean) "/>
        <method signature="public boolean requestRouteToHostAddress(int, java.net.InetAddress) "/>
        <method signature="public void setBackgroundDataSetting(boolean) "/>
        <method signature="public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo() "/>
        <method signature="public boolean getMobileDataEnabled() "/>
        <method signature="public void setMobileDataEnabled(boolean) "/>
        <method signature="public static android.net.ConnectivityManager from(android.content.Context) "/>
        <method signature="public java.lang.String[] getTetherableIfaces() "/>
        <method signature="public java.lang.String[] getTetheredIfaces() "/>
        <method signature="public java.lang.String[] getTetheringErroredIfaces() "/>
        <method signature="public int tether(java.lang.String) "/>
        <method signature="public int untether(java.lang.String) "/>
        <method signature="public boolean isTetheringSupported() "/>
        <method signature="public java.lang.String[] getTetherableUsbRegexs() "/>
        <method signature="public java.lang.String[] getTetherableWifiRegexs() "/>
        <method signature="public java.lang.String[] getTetherableBluetoothRegexs() "/>
        <method signature="public int setUsbTethering(boolean) "/>
        <method signature="public int getLastTetherError(java.lang.String) "/>
        <method signature="public boolean requestNetworkTransitionWakelock(java.lang.String) "/>
        <method signature="public void reportInetCondition(int, int) "/>
        <method signature="public void setGlobalProxy(android.net.ProxyProperties) "/>
        <method signature="public android.net.ProxyProperties getGlobalProxy() "/>
        <method signature="public android.net.ProxyProperties getProxy() "/>
        <method signature="public void setDataDependency(int, boolean) "/>
        <method signature="public boolean isNetworkSupported(int) "/>
        <method signature="public boolean updateLockdownVpn() "/>
        <method signature="public void captivePortalCheckComplete(android.net.NetworkInfo) "/>
        <method signature="public void captivePortalCheckCompleted(android.net.NetworkInfo, boolean) "/>
        <method signature="public void supplyMessenger(int, android.os.Messenger) "/>
        <method signature="public int checkMobileProvisioning(int) "/>
        <method signature="public java.lang.String getMobileProvisioningUrl() "/>
        <method signature="public java.lang.String getMobileRedirectedProvisioningUrl() "/>
        <method signature="public android.net.LinkQualityInfo getLinkQualityInfo(int) "/>
        <method signature="public android.net.LinkQualityInfo getActiveLinkQualityInfo() "/>
        <method signature="public android.net.LinkQualityInfo[] getAllLinkQualityInfo() "/>
        <method signature="public void setProvisioningNotificationVisible(boolean, int, java.lang.String, java.lang.String) "/>
        <method signature="public void setAirplaneMode(boolean) "/>
    </class>
    <class name="android.content.ClipData">
        <method signature="public android.graphics.Bitmap getIcon() "/>
        <method signature="public void prepareToLeaveProcess() "/>
        <method signature="public void toShortString(java.lang.StringBuilder) "/>
    </class>
    <class name="android.content.pm.PermissionInfo">
        <method signature="public static int fixProtectionLevel(int) "/>
        <method signature="public static java.lang.String protectionToString(int) "/>
    </class>
    <class name="android.hardware.camera2.CameraDevice.CaptureListener">
        <method signature="public void onCapturePartial(android.hardware.camera2.CameraDevice, android.hardware.camera2.CaptureRequest, android.hardware.camera2.CaptureResult) "/>
    </class>
    <class name="java.net.URL">
        <method signature="public java.net.URI toURILenient() throws java.net.URISyntaxException"/>
        <method signature="public int getEffectivePort() "/>
    </class>
    <class name="android.transition.TransitionManager">
        <method signature="public void setDefaultTransition(android.transition.Transition) "/>
        <method signature="public static android.transition.Transition getDefaultTransition() "/>
    </class>
    <class name="android.media.MediaRecorder">
        <method signature="public void setAuxiliaryOutputFile(java.io.FileDescriptor) "/>
        <method signature="public void setAuxiliaryOutputFile(java.lang.String) "/>
    </class>
    <class name="java.io.FileDescriptor">
        <method signature="public final int getInt$() "/>
        <method signature="public final void setInt$(int) "/>
    </class>
    <class name="android.appwidget.AppWidgetManager">
        <method signature="public List&lt;android.appwidget.AppWidgetProviderInfo&gt; getInstalledProviders(int) "/>
        <method signature="public void bindAppWidgetId(int, android.content.ComponentName) "/>
        <method signature="public void bindAppWidgetId(int, android.content.ComponentName, android.os.Bundle) "/>
        <method signature="public boolean hasBindAppWidgetPermission(java.lang.String) "/>
        <method signature="public void setBindAppWidgetPermission(java.lang.String, boolean) "/>
        <method signature="public void bindRemoteViewsService(int, android.content.Intent, android.os.IBinder, android.os.UserHandle) "/>
        <method signature="public void unbindRemoteViewsService(int, android.content.Intent, android.os.UserHandle) "/>
    </class>
    <class name="android.inputmethodservice.KeyboardView">
        <method signature="public void onClick(android.view.View) "/>
    </class>
    <class name="java.lang.reflect.ArtMethod">
        <method signature="public static boolean equalConstructorParameters(java.lang.reflect.ArtMethod, Class&lt;?&gt;[]) "/>
        <method signature="public static boolean equalMethodParameters(java.lang.reflect.ArtMethod, Class&lt;?&gt;[]) "/>
    </class>
    <class name="android.database.sqlite.SQLiteProgram">
        <method signature="protected final android.database.sqlite.SQLiteSession getSession() "/>
        <method signature="protected final int getConnectionFlags() "/>
        <method signature="protected final void onCorruption() "/>
    </class>
    <class name="android.print.PrinterCapabilitiesInfo">
        <method signature="public void copyFrom(android.print.PrinterCapabilitiesInfo) "/>
    </class>
    <class name="android.telephony.CellInfoGsm">
        <method signature="public void setCellIdentity(android.telephony.CellIdentityGsm) "/>
        <method signature="public void setCellSignalStrength(android.telephony.CellSignalStrengthGsm) "/>
        <method signature="protected static android.telephony.CellInfoGsm createFromParcelBody(android.os.Parcel) "/>
    </class>
</hide-methods>
